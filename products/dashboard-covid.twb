<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20231.23.0511.1508                               -->
<workbook original-version='18.1' source-build='2023.1.2 (20231.23.0511.1508)' source-platform='win' version='18.1' xml:base='https://prod-apnortheast-a.online.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <_.fcp.InequalityRelationships.true...InequalityRelationships />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <repository-location id='Dashboardcoronavirusintheworldlab03' path='/t/datavisualizationgroup7hcmus/workbooks' revision='1.0' site='datavisualizationgroup7hcmus' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='worldometer_coronavirus' inline='true' name='federated.1mvbxbv09wel1v1800s2r0asbms6' version='18.1'>
      <repository-location id='worldometer_coronavirus' path='datasources' revision='1.0' />
      <connection class='federated'>
        <named-connections>
          <named-connection caption='worldometer_coronavirus_daily_data' name='excel-direct.0zvdcy51tfcz5k12kl6a50k7ot2e'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='D:/1_NAM_3_HK2/Data Visualization/lab/lab03/dataset/worldometer_coronavirus_daily_data.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
          <named-connection caption='worldometer_coronavirus_summary_data' name='excel-direct.0k3i2ll1kc2ncv1633eno0d8w508'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='D:/1_NAM_3_HK2/Data Visualization/lab/lab03/dataset/worldometer_coronavirus_summary_data.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='excel-direct.0zvdcy51tfcz5k12kl6a50k7ot2e' name='worldometer_coronavirus_daily' table='[worldometer_coronavirus_daily$]' type='table'>
          <columns gridOrigin='A1:G10001:no:A1:G10001:0' header='yes' outcome='6'>
            <column datatype='date' name='date' ordinal='0' />
            <column datatype='string' name='country' ordinal='1' />
            <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
            <column datatype='integer' name='daily_new_cases' ordinal='3' />
            <column datatype='integer' name='active_cases' ordinal='4' />
            <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
            <column datatype='integer' name='daily_new_deaths' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='excel-direct.0zvdcy51tfcz5k12kl6a50k7ot2e' name='worldometer_coronavirus_daily' table='[worldometer_coronavirus_daily$]' type='table'>
            <columns gridOrigin='A1:G10001:no:A1:G10001:0' header='yes' outcome='6'>
              <column datatype='date' name='date' ordinal='0' />
              <column datatype='string' name='country' ordinal='1' />
              <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
              <column datatype='integer' name='daily_new_cases' ordinal='3' />
              <column datatype='integer' name='active_cases' ordinal='4' />
              <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
              <column datatype='integer' name='daily_new_deaths' ordinal='6' />
            </columns>
          </relation>
          <relation connection='excel-direct.0k3i2ll1kc2ncv1633eno0d8w508' name='worldometer_coronavirus_summary' table='[worldometer_coronavirus_summary$]' type='table'>
            <columns gridOrigin='A1:L227:no:A1:L227:0' header='yes' outcome='6'>
              <column datatype='string' name='country' ordinal='0' />
              <column datatype='string' name='continent' ordinal='1' />
              <column datatype='integer' name='total_confirmed' ordinal='2' />
              <column datatype='integer' name='total_deaths' ordinal='3' />
              <column datatype='integer' name='total_recovered' ordinal='4' />
              <column datatype='integer' name='active_cases' ordinal='5' />
              <column datatype='integer' name='serious_or_critical' ordinal='6' />
              <column datatype='integer' name='total_cases_per_1m_population' ordinal='7' />
              <column datatype='integer' name='total_deaths_per_1m_population' ordinal='8' />
              <column datatype='integer' name='total_tests' ordinal='9' />
              <column datatype='integer' name='total_tests_per_1m_population' ordinal='10' />
              <column datatype='integer' name='population' ordinal='11' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <cols>
          <map key='[active_cases (worldometer!coronavirus!summary)]' value='[worldometer_coronavirus_summary].[active_cases]' />
          <map key='[active_cases]' value='[worldometer_coronavirus_daily].[active_cases]' />
          <map key='[continent]' value='[worldometer_coronavirus_summary].[continent]' />
          <map key='[country (worldometer!coronavirus!summary)]' value='[worldometer_coronavirus_summary].[country]' />
          <map key='[country]' value='[worldometer_coronavirus_daily].[country]' />
          <map key='[cumulative_total_cases]' value='[worldometer_coronavirus_daily].[cumulative_total_cases]' />
          <map key='[cumulative_total_deaths]' value='[worldometer_coronavirus_daily].[cumulative_total_deaths]' />
          <map key='[daily_new_cases]' value='[worldometer_coronavirus_daily].[daily_new_cases]' />
          <map key='[daily_new_deaths]' value='[worldometer_coronavirus_daily].[daily_new_deaths]' />
          <map key='[date]' value='[worldometer_coronavirus_daily].[date]' />
          <map key='[population]' value='[worldometer_coronavirus_summary].[population]' />
          <map key='[serious_or_critical]' value='[worldometer_coronavirus_summary].[serious_or_critical]' />
          <map key='[total_cases_per_1m_population]' value='[worldometer_coronavirus_summary].[total_cases_per_1m_population]' />
          <map key='[total_confirmed]' value='[worldometer_coronavirus_summary].[total_confirmed]' />
          <map key='[total_deaths]' value='[worldometer_coronavirus_summary].[total_deaths]' />
          <map key='[total_deaths_per_1m_population]' value='[worldometer_coronavirus_summary].[total_deaths_per_1m_population]' />
          <map key='[total_recovered]' value='[worldometer_coronavirus_summary].[total_recovered]' />
          <map key='[total_tests]' value='[worldometer_coronavirus_summary].[total_tests]' />
          <map key='[total_tests_per_1m_population]' value='[worldometer_coronavirus_summary].[total_tests_per_1m_population]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:G10001:no:A1:G10001:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:L227:no:A1:L227:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LVI_RVN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cumulative_total_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[cumulative_total_cases]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>cumulative_total_cases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>daily_new_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[daily_new_cases]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>daily_new_cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>active_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[active_cases]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>active_cases</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cumulative_total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[cumulative_total_deaths]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>cumulative_total_deaths</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>daily_new_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[daily_new_deaths]</local-name>
            <parent-name>[worldometer_coronavirus_daily]</parent-name>
            <remote-alias>daily_new_deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[country (worldometer!coronavirus!summary)]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LVI_RVN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>continent</remote-name>
            <remote-type>130</remote-type>
            <local-name>[continent]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>continent</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LVI_RVN_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_confirmed</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_confirmed]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_confirmed</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_deaths]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_deaths</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_recovered</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_recovered]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_recovered</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>active_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[active_cases (worldometer!coronavirus!summary)]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>active_cases</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>serious_or_critical</remote-name>
            <remote-type>20</remote-type>
            <local-name>[serious_or_critical]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>serious_or_critical</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_cases_per_1m_population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_cases_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_cases_per_1m_population</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_deaths_per_1m_population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_deaths_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_deaths_per_1m_population</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_tests]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_tests</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_tests_per_1m_population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_tests_per_1m_population]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>total_tests_per_1m_population</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>population</remote-name>
            <remote-type>20</remote-type>
            <local-name>[population]</local-name>
            <parent-name>[worldometer_coronavirus_summary]</parent-name>
            <remote-alias>population</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[ctd:country (worldometer!coronavirus!summary):qk]&quot;' value='Number of countries' />
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]&quot;' value='Total active cases' />
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]&quot;' value='Total confirmed' />
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]&quot;' value='Total deaths' />
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]&quot;' value='Total recovered' />
          <alias key='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_tests:qk]&quot;' value='Total tests' />
        </aliases>
      </column>
      <column caption='Active Cases' datatype='real' name='[Calculation_1275363152947314688]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([active_cases (worldometer!coronavirus!summary)])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
      </column>
      <column caption='Total Deaths' datatype='real' name='[Calculation_1275363152947662849]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([total_deaths])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
      </column>
      <column caption='Total Recovered' datatype='real' name='[Calculation_1275363152947752962]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([total_recovered])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
      </column>
      <column caption='Zero Asis' datatype='integer' name='[Calculation_275564034219474946]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='0' />
      </column>
      <column caption='Top 10 highest total case' datatype='boolean' name='[Calculation_275564034223230979]' role='measure' type='nominal'>
        <calculation class='tableau' formula='RANK_UNIQUE(SUM([cumulative_total_cases 1])) &lt;= 10'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='worldometer_coronavirus_daily' datatype='table' name='[__tableau_internal_object_id__].[worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='worldometer_coronavirus_summary' datatype='table' name='[__tableau_internal_object_id__].[worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6]' role='measure' type='quantitative' />
      <column caption='Active cases' datatype='integer' name='[active_cases (worldometer!coronavirus!summary)]' role='measure' type='quantitative' />
      <column datatype='integer' name='[active_cases]' role='measure' type='quantitative' />
      <column datatype='string' name='[continent]' role='dimension' type='nominal' />
      <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
      <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
      <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
      <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
      <column datatype='integer' name='[total_tests]' role='measure' type='quantitative' />
      <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='CountD' name='[ctd:country (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
      <column-instance column='[continent]' derivation='None' name='[none:continent:nk]' pivot='key' type='nominal' />
      <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <column-instance column='[total_confirmed]' derivation='Sum' name='[pcto:sum:total_confirmed:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[total_deaths]' derivation='Sum' name='[pcto:sum:total_deaths:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[Calculation_275564034219474946]' derivation='Sum' name='[sum:Calculation_275564034219474946:qk]' pivot='key' type='quantitative' />
      <column-instance column='[active_cases (worldometer!coronavirus!summary)]' derivation='Sum' name='[sum:active_cases (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
      <column-instance column='[active_cases]' derivation='Sum' name='[sum:active_cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[population]' derivation='Sum' name='[sum:population:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[total_tests]' derivation='Sum' name='[sum:total_tests:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1275363152947314688]' derivation='User' name='[usr:Calculation_1275363152947314688:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1275363152947662849]' derivation='User' name='[usr:Calculation_1275363152947662849:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1275363152947752962]' derivation='User' name='[usr:Calculation_1275363152947752962:qk]' pivot='key' type='quantitative' />
      <group caption='Action (Country) 1' hidden='true' name='[Action (Country) 1]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' />
        </groupfilter>
      </group>
      <group caption='Action (Country)' hidden='true' name='[Action (Country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
        </groupfilter>
      </group>
      <group caption='Action (continent)' hidden='true' name='[Action (continent)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[continent]' />
        </groupfilter>
      </group>
      <group caption='Action (country)' hidden='true' name='[Action (country)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[country]' />
        </groupfilter>
      </group>
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='false' units='records'>
        <connection access_mode='readonly' authentication='auth-none' author-locale='en_US' class='hyper' dbname='D:/tableau/worldometer_coronavirus_daily_d (worldometer_coronavirus_daily_data - Copy) (2).hyper' default-settings='yes' schema='Extract' server='' sslmode='' tablename='Extract' update-time='05/30/2023 03:55:25 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27' table='[Extract].[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
            <relation name='worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27' table='[Extract].[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]' type='table' />
            <relation name='worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802' table='[Extract].[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]' type='table' />
          </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
          <cols>
            <map key='[active_cases (worldometer!coronavirus!summary)]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[active_cases]' />
            <map key='[active_cases]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[active_cases]' />
            <map key='[continent]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[continent]' />
            <map key='[country (worldometer!coronavirus!summary)]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[country]' />
            <map key='[country]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[country]' />
            <map key='[cumulative_total_cases]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[cumulative_total_cases]' />
            <map key='[cumulative_total_deaths]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[cumulative_total_deaths]' />
            <map key='[daily_new_cases]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[daily_new_cases]' />
            <map key='[daily_new_deaths]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[daily_new_deaths]' />
            <map key='[date]' value='[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27].[date]' />
            <map key='[population]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[population]' />
            <map key='[serious_or_critical]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[serious_or_critical]' />
            <map key='[total_cases_per_1m_population]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_cases_per_1m_population]' />
            <map key='[total_confirmed]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_confirmed]' />
            <map key='[total_deaths]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_deaths]' />
            <map key='[total_deaths_per_1m_population]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_deaths_per_1m_population]' />
            <map key='[total_recovered]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_recovered]' />
            <map key='[total_tests]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_tests]' />
            <map key='[total_tests_per_1m_population]' value='[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802].[total_tests_per_1m_population]' />
          </cols>
          <refresh>
            <refresh-event add-from-file-path='worldometer_coronavirus_daily_d (worldometer_coronavirus_daily_data - Copy) (2)' increment-value='%null%' refresh-type='create' rows-inserted='185013' timestamp-start='2023-05-30 03:55:08.902' />
          </refresh>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>&#10;date          </remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>&#10;date          </remote-alias>
              <ordinal>0</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>4014</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;country          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>&#10;country          </remote-alias>
              <ordinal>1</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>357</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>
cumulative_total_cases          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[cumulative_total_cases]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>
cumulative_total_cases          </remote-alias>
              <ordinal>2</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>35809</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;daily_new_cases          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[daily_new_cases]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>&#10;daily_new_cases          </remote-alias>
              <ordinal>3</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>7153</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;active_cases          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[active_cases]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>&#10;active_cases          </remote-alias>
              <ordinal>4</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>23740</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>
cumulative_total_deaths          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[cumulative_total_deaths]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>
cumulative_total_deaths          </remote-alias>
              <ordinal>5</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>10720</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;daily_new_deaths          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[daily_new_deaths]</local-name>
              <parent-name>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</parent-name>
              <remote-alias>&#10;daily_new_deaths          </remote-alias>
              <ordinal>6</ordinal>
              <family>
worldometer_coronavirus_daily_d          </family>
              <aggregation>None</aggregation>
              <approx-count>921</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;country          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[country (worldometer!coronavirus!summary)]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;country          </remote-alias>
              <ordinal>7</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>226</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;continent          </remote-name>
              <remote-type>129</remote-type>
              <local-name>[continent]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;continent          </remote-alias>
              <ordinal>8</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>6</approx-count>
              <contains-null>false</contains-null>
              <collation flag='0' name='LVI_RVN' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;total_confirmed          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_confirmed]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;total_confirmed          </remote-alias>
              <ordinal>9</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>226</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;total_deaths          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_deaths]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;total_deaths          </remote-alias>
              <ordinal>10</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>212</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;total_recovered          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_recovered]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;total_recovered          </remote-alias>
              <ordinal>11</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>204</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;active_cases          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[active_cases (worldometer!coronavirus!summary)]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;active_cases          </remote-alias>
              <ordinal>12</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>193</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;serious_or_critical          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[serious_or_critical]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;serious_or_critical          </remote-alias>
              <ordinal>13</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>83</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>
total_cases_per_1m_population          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_cases_per_1m_population]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>
total_cases_per_1m_population          </remote-alias>
              <ordinal>14</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>226</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>
total_deaths_per_1m_population          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_deaths_per_1m_population]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>
total_deaths_per_1m_population          </remote-alias>
              <ordinal>15</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>206</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;total_tests          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_tests]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;total_tests          </remote-alias>
              <ordinal>16</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>213</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>
total_tests_per_1m_population          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[total_tests_per_1m_population]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>
total_tests_per_1m_population          </remote-alias>
              <ordinal>17</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>213</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>&#10;population          </remote-name>
              <remote-type>20</remote-type>
              <local-name>[population]</local-name>
              <parent-name>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</parent-name>
              <remote-alias>&#10;population          </remote-alias>
              <ordinal>18</ordinal>
              <family>
worldometer_coronavirus_summary          </family>
              <aggregation>None</aggregation>
              <approx-count>226</approx-count>
              <contains-null>false</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='1' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' rowDisplayCount='227' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:continent:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Australia/Oceania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>%null%</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:country (worldometer!coronavirus!summary):nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Saint Vincent And The Grenadines&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Swaziland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turks And Caicos Islands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bosnia And Herzegovina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Pierre And Miquelon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Democratic Republic Of The Congo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Falkland Islands Malvinas&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;China Macao Sar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Macedonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Kitts And Nevis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Trinidad And Tobago&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Guinea Bissau&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Antigua And Barbuda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Curacao&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Isle Of Man&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;State Of Palestine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Holy See&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Wallis And Futuna Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Barthelemy&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Timor Leste&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sao Tome And Principe&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;China Hong Kong Sar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cote D Ivoire&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[pcto:sum:total_recovered:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947752962:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[pcto:sum:total_deaths:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:population:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947662849:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country:nk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[pcto:sum:total_confirmed:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[prc10:total_confirmed:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[prc5:total_confirmed:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[prc95:total_confirmed:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947314688:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Viet Nam&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='worldometer_coronavirus_daily_d' id='worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27'>
            <properties context='extract'>
              <relation name='worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27' table='[Extract].[worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27]' type='table' />
            </properties>
          </object>
          <object caption='worldometer_coronavirus_daily' id='worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE'>
            <properties context=''>
              <relation connection='excel-direct.0zvdcy51tfcz5k12kl6a50k7ot2e' name='worldometer_coronavirus_daily' table='[worldometer_coronavirus_daily$]' type='table'>
                <columns gridOrigin='A1:G10001:no:A1:G10001:0' header='yes' outcome='6'>
                  <column datatype='date' name='date' ordinal='0' />
                  <column datatype='string' name='country' ordinal='1' />
                  <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
                  <column datatype='integer' name='daily_new_cases' ordinal='3' />
                  <column datatype='integer' name='active_cases' ordinal='4' />
                  <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
                  <column datatype='integer' name='daily_new_deaths' ordinal='6' />
                </columns>
              </relation>
            </properties>
          </object>
          <object caption='worldometer_coronavirus_summary' id='worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802'>
            <properties context='extract'>
              <relation name='worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802' table='[Extract].[worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802]' type='table' />
            </properties>
          </object>
          <object caption='worldometer_coronavirus_summary' id='worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6'>
            <properties context=''>
              <relation connection='excel-direct.0k3i2ll1kc2ncv1633eno0d8w508' name='worldometer_coronavirus_summary' table='[worldometer_coronavirus_summary$]' type='table'>
                <columns gridOrigin='A1:L227:no:A1:L227:0' header='yes' outcome='6'>
                  <column datatype='string' name='country' ordinal='0' />
                  <column datatype='string' name='continent' ordinal='1' />
                  <column datatype='integer' name='total_confirmed' ordinal='2' />
                  <column datatype='integer' name='total_deaths' ordinal='3' />
                  <column datatype='integer' name='total_recovered' ordinal='4' />
                  <column datatype='integer' name='active_cases' ordinal='5' />
                  <column datatype='integer' name='serious_or_critical' ordinal='6' />
                  <column datatype='integer' name='total_cases_per_1m_population' ordinal='7' />
                  <column datatype='integer' name='total_deaths_per_1m_population' ordinal='8' />
                  <column datatype='integer' name='total_tests' ordinal='9' />
                  <column datatype='integer' name='total_tests_per_1m_population' ordinal='10' />
                  <column datatype='integer' name='population' ordinal='11' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[country]' />
              <expression op='[country (worldometer!coronavirus!summary)]' />
            </expression>
            <first-end-point object-id='worldometer!coronavirus!daily!d_107C4A106A924EACA3A19134565E0A27' />
            <second-end-point object-id='worldometer!coronavirus!summary_755C3727AC12483380DF07ABDE9A6802' />
          </relationship>
          <relationship>
            <expression op='AND'>
              <expression op='='>
                <expression op='[country]' />
                <expression op='[country (worldometer!coronavirus!summary)]' />
              </expression>
              <expression _.fcp.InequalityRelationships.false...op='=' _.fcp.InequalityRelationships.true...op='&lt;&gt;'>
                <expression _.fcp.InequalityRelationships.false...op='[active_cases &lt;&gt; active_cases (worldometer!coronavirus!summary)]' _.fcp.InequalityRelationships.true...op='[active_cases]' />
                <expression _.fcp.InequalityRelationships.false...op='[]' _.fcp.InequalityRelationships.true...op='[active_cases (worldometer!coronavirus!summary)]' />
              </expression>
            </expression>
            <first-end-point object-id='worldometer!coronavirus!daily_4CFBBE8E9F4D424E821ED4E9F3E965EE' />
            <second-end-point object-id='worldometer!coronavirus!summary_7CEF5DFBFB5E475BB94F7AC4A6B687B6' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
    <datasource inline='true' name='Clipboard_20230531T202021' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='worldometer_coronavirus_daily_data' name='textscan.19h492u0chryur1cp9hed0uhdhia'>
            <connection class='textscan' directory='D:/1_NAM_3_HK2/Data Visualization/lab/lab02' filename='worldometer_coronavirus_daily_data.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.19h492u0chryur1cp9hed0uhdhia' name='deleted_worldometer_coronavirus_daily_data.csv' table='[deleted_worldometer_coronavirus_daily_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='vi_VN' separator=';'>
            <column datatype='date' name='date' ordinal='0' />
            <column datatype='string' name='country' ordinal='1' />
            <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
            <column datatype='integer' name='daily_new_cases' ordinal='3' />
            <column datatype='integer' name='active_cases' ordinal='4' />
            <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
            <column datatype='integer' name='daily_new_deaths' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.19h492u0chryur1cp9hed0uhdhia' name='deleted_worldometer_coronavirus_daily_data.csv' table='[deleted_worldometer_coronavirus_daily_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='vi_VN' separator=';'>
            <column datatype='date' name='date' ordinal='0' />
            <column datatype='string' name='country' ordinal='1' />
            <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
            <column datatype='integer' name='daily_new_cases' ordinal='3' />
            <column datatype='integer' name='active_cases' ordinal='4' />
            <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
            <column datatype='integer' name='daily_new_deaths' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;vi&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;₫&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;;&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;vi_VN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LVI_RVN' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cumulative_total_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[cumulative_total_cases]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>cumulative_total_cases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>daily_new_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[daily_new_cases]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>daily_new_cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>active_cases</remote-name>
            <remote-type>20</remote-type>
            <local-name>[active_cases]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>active_cases</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cumulative_total_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[cumulative_total_deaths]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>cumulative_total_deaths</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>daily_new_deaths</remote-name>
            <remote-type>20</remote-type>
            <local-name>[daily_new_deaths]</local-name>
            <parent-name>[deleted_worldometer_coronavirus_daily_data.csv]</parent-name>
            <remote-alias>daily_new_deaths</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <_.fcp.ObjectModelTableType.true...column caption='deleted_worldometer_coronavirus_daily_data.csv' datatype='table' name='[__tableau_internal_object_id__].[deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Daily New Cases' datatype='integer' name='[daily_new_cases]' role='measure' type='quantitative' />
      <column caption='Daily New Deaths' datatype='integer' name='[daily_new_deaths]' role='measure' type='quantitative' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Viet Nam&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='deleted_worldometer_coronavirus_daily_data.csv' id='deleted_worldometer_coronavirus_daily_data.csv_FB6A7B259E1E40588AC7EDAE38EE710B'>
            <properties context=''>
              <relation connection='textscan.19h492u0chryur1cp9hed0uhdhia' name='deleted_worldometer_coronavirus_daily_data.csv' table='[deleted_worldometer_coronavirus_daily_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='vi_VN' separator=';'>
                  <column datatype='date' name='date' ordinal='0' />
                  <column datatype='string' name='country' ordinal='1' />
                  <column datatype='integer' name='cumulative_total_cases' ordinal='2' />
                  <column datatype='integer' name='daily_new_cases' ordinal='3' />
                  <column datatype='integer' name='active_cases' ordinal='4' />
                  <column datatype='integer' name='cumulative_total_deaths' ordinal='5' />
                  <column datatype='integer' name='daily_new_deaths' ordinal='6' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter 2 (generated)' name='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard covid' type='sheet' worksheet='HeatMap' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard covid' />
      </command>
    </action>
    <action caption='Highlight 1 (generated)' name='[Action4_EC5A52D7F3534460B5EAE189E5D05EC7]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Đường ca nhiễm' />
      <command command='tsc:brush'>
        <param name='special-fields' value='all' />
        <param name='target' value='Đường ca nhiễm' />
      </command>
    </action>
    <action caption='Filter 3 (generated)' name='[Action5_675FBAC38C444A559F682680782CF4D0]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard covid' type='sheet' worksheet='bar chart continent' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard covid' />
      </command>
    </action>
    <action caption='Filter 4 (generated)' name='[Action6_2F18E1828E0243F9988DF55EE138883B]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard covid' type='sheet' worksheet='Chỉ số' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard covid' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action7_D853FE83C2004991950745CF5136F221]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Pie Chart' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Measure Names' />
        <param name='target' value='Pie Chart' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Chỉ số'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column caption='Active cases' datatype='integer' name='[active_cases (worldometer!coronavirus!summary)]' role='measure' type='quantitative' />
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='CountD' name='[ctd:country (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
            <column-instance column='[active_cases (worldometer!coronavirus!summary)]' derivation='Sum' name='[sum:active_cases (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_tests]' derivation='Sum' name='[sum:total_tests:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_tests]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[ctd:country (worldometer!coronavirus!summary):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_tests:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='height' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' value='77' />
            <format attr='width' value='232' />
            <format attr='height' value='53' />
            <format attr='font-size' data-class='subtotal' value='12' />
            <format attr='font-weight' data-class='subtotal' value='bold' />
            <format attr='color' data-class='subtotal' value='#000000' />
            <format attr='border-style' value='solid' />
            <format attr='border-color' value='#000000' />
            <format attr='border-width' value='2' />
            <format attr='text-align' value='center' />
            <format attr='width' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' value='203' />
          </style-rule>
          <style-rule element='header'>
            <format attr='height' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' value='48' />
            <format attr='border-style' value='solid' />
            <format attr='border-color' value='#000000' />
            <format attr='border-width' value='2' />
            <format attr='border-width' data-class='subtotal' value='2' />
          </style-rule>
          <style-rule element='label'>
            <format attr='color' scope='cols' value='#f28e2b' />
            <format attr='text-align' value='center' />
            <format attr='font-size' scope='cols' value='12' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-style' value='solid' />
            <format attr='border-color' value='#000000' />
            <format attr='border-width' value='2' />
            <format attr='border-width' data-class='subtotal' value='2' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='font-size' value='14' />
            <format attr='font-weight' value='bold' />
            <format attr='color' value='#4e79a7' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='stroke-color' scope='rows' value='#000000' />
            <format attr='stroke-size' scope='rows' value='3' />
          </style-rule>
          <style-rule element='header-div'>
            <format attr='stroke-size' scope='rows' value='2' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <text column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='size' value='0.82359117269515991' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{C2727182-AC34-4872-B56A-DCC9E9087EE8}' />
    </worksheet>
    <worksheet name='HeatMap'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>Total Coronavirus Confirmed Cases by Countries</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column caption='Active cases' datatype='integer' name='[active_cases (worldometer!coronavirus!summary)]' role='measure' type='quantitative' />
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
            <column-instance column='[active_cases (worldometer!coronavirus!summary)]' derivation='Sum' name='[sum:active_cases (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
            <column-instance column='[population]' derivation='Sum' name='[sum:population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_tests]' derivation='Sum' name='[sum:total_tests:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_tests]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (country)]'>
            <groupfilter function='level-members' level='[country]' user:ui-action-filter='[Action1_5E909D29DD5446119C841315368FAA2F]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Belarus&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Bosnia And Herzegovina&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;British Virgin Islands&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Burundi&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;China Hong Kong Sar&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;China Macao Sar&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Cook Islands&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Ecuador&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Falkland Islands Malvinas&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Finland&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;French Polynesia&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Holy See&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Iceland&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Laos&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Marshall Islands&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Micronesia&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Nauru&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Niue&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Norway&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Peru&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Portugal&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Romania&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Saint Barthelemy&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Saint Helena&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Saint Pierre And Miquelon&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Sierra Leone&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;South Korea&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Sudan&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Tanzania&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Tunisia&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Ukraine&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='&quot;Western Sahara&quot;' />
                <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Afghanistan&quot;</bucket>
              <bucket>&quot;Albania&quot;</bucket>
              <bucket>&quot;Algeria&quot;</bucket>
              <bucket>&quot;Andorra&quot;</bucket>
              <bucket>&quot;Angola&quot;</bucket>
              <bucket>&quot;Anguilla&quot;</bucket>
              <bucket>&quot;Antigua And Barbuda&quot;</bucket>
              <bucket>&quot;Argentina&quot;</bucket>
              <bucket>&quot;Armenia&quot;</bucket>
              <bucket>&quot;Aruba&quot;</bucket>
              <bucket>&quot;Australia&quot;</bucket>
              <bucket>&quot;Austria&quot;</bucket>
              <bucket>&quot;Azerbaijan&quot;</bucket>
              <bucket>&quot;Bahamas&quot;</bucket>
              <bucket>&quot;Bahrain&quot;</bucket>
              <bucket>&quot;Bangladesh&quot;</bucket>
              <bucket>&quot;Barbados&quot;</bucket>
              <bucket>&quot;Belarus&quot;</bucket>
              <bucket>&quot;Belgium&quot;</bucket>
              <bucket>&quot;Belize&quot;</bucket>
              <bucket>&quot;Benin&quot;</bucket>
              <bucket>&quot;Bermuda&quot;</bucket>
              <bucket>&quot;Bhutan&quot;</bucket>
              <bucket>&quot;Bolivia&quot;</bucket>
              <bucket>&quot;Bosnia And Herzegovina&quot;</bucket>
              <bucket>&quot;Botswana&quot;</bucket>
              <bucket>&quot;Brazil&quot;</bucket>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
              <bucket>&quot;Bulgaria&quot;</bucket>
              <bucket>&quot;Burkina Faso&quot;</bucket>
              <bucket>&quot;Burundi&quot;</bucket>
              <bucket>&quot;Cabo Verde&quot;</bucket>
              <bucket>&quot;Cambodia&quot;</bucket>
              <bucket>&quot;Cameroon&quot;</bucket>
              <bucket>&quot;Canada&quot;</bucket>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
              <bucket>&quot;Cayman Islands&quot;</bucket>
              <bucket>&quot;Central African Republic&quot;</bucket>
              <bucket>&quot;Chad&quot;</bucket>
              <bucket>&quot;Channel Islands&quot;</bucket>
              <bucket>&quot;Chile&quot;</bucket>
              <bucket>&quot;China&quot;</bucket>
              <bucket>&quot;China Hong Kong Sar&quot;</bucket>
              <bucket>&quot;China Macao Sar&quot;</bucket>
              <bucket>&quot;Colombia&quot;</bucket>
              <bucket>&quot;Comoros&quot;</bucket>
              <bucket>&quot;Congo&quot;</bucket>
              <bucket>&quot;Cook Islands&quot;</bucket>
              <bucket>&quot;Costa Rica&quot;</bucket>
              <bucket>&quot;Cote D Ivoire&quot;</bucket>
              <bucket>&quot;Croatia&quot;</bucket>
              <bucket>&quot;Cuba&quot;</bucket>
              <bucket>&quot;Curacao&quot;</bucket>
              <bucket>&quot;Cyprus&quot;</bucket>
              <bucket>&quot;Czech Republic&quot;</bucket>
              <bucket>&quot;Democratic Republic Of The Congo&quot;</bucket>
              <bucket>&quot;Denmark&quot;</bucket>
              <bucket>&quot;Djibouti&quot;</bucket>
              <bucket>&quot;Dominica&quot;</bucket>
              <bucket>&quot;Dominican Republic&quot;</bucket>
              <bucket>&quot;Ecuador&quot;</bucket>
              <bucket>&quot;Egypt&quot;</bucket>
              <bucket>&quot;El Salvador&quot;</bucket>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
              <bucket>&quot;Eritrea&quot;</bucket>
              <bucket>&quot;Estonia&quot;</bucket>
              <bucket>&quot;Ethiopia&quot;</bucket>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
              <bucket>&quot;Falkland Islands Malvinas&quot;</bucket>
              <bucket>&quot;Fiji&quot;</bucket>
              <bucket>&quot;Finland&quot;</bucket>
              <bucket>&quot;France&quot;</bucket>
              <bucket>&quot;French Guiana&quot;</bucket>
              <bucket>&quot;French Polynesia&quot;</bucket>
              <bucket>&quot;Gabon&quot;</bucket>
              <bucket>&quot;Gambia&quot;</bucket>
              <bucket>&quot;Georgia&quot;</bucket>
              <bucket>&quot;Germany&quot;</bucket>
              <bucket>&quot;Ghana&quot;</bucket>
              <bucket>&quot;Gibraltar&quot;</bucket>
              <bucket>&quot;Greece&quot;</bucket>
              <bucket>&quot;Greenland&quot;</bucket>
              <bucket>&quot;Grenada&quot;</bucket>
              <bucket>&quot;Guadeloupe&quot;</bucket>
              <bucket>&quot;Guatemala&quot;</bucket>
              <bucket>&quot;Guinea&quot;</bucket>
              <bucket>&quot;Guinea Bissau&quot;</bucket>
              <bucket>&quot;Guyana&quot;</bucket>
              <bucket>&quot;Haiti&quot;</bucket>
              <bucket>&quot;Holy See&quot;</bucket>
              <bucket>&quot;Honduras&quot;</bucket>
              <bucket>&quot;Hungary&quot;</bucket>
              <bucket>&quot;Iceland&quot;</bucket>
              <bucket>&quot;India&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;Iran&quot;</bucket>
              <bucket>&quot;Iraq&quot;</bucket>
              <bucket>&quot;Ireland&quot;</bucket>
              <bucket>&quot;Isle Of Man&quot;</bucket>
              <bucket>&quot;Israel&quot;</bucket>
              <bucket>&quot;Italy&quot;</bucket>
              <bucket>&quot;Jamaica&quot;</bucket>
              <bucket>&quot;Japan&quot;</bucket>
              <bucket>&quot;Jordan&quot;</bucket>
              <bucket>&quot;Kazakhstan&quot;</bucket>
              <bucket>&quot;Kenya&quot;</bucket>
              <bucket>&quot;Kiribati&quot;</bucket>
              <bucket>&quot;Kuwait&quot;</bucket>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
              <bucket>&quot;Laos&quot;</bucket>
              <bucket>&quot;Latvia&quot;</bucket>
              <bucket>&quot;Lebanon&quot;</bucket>
              <bucket>&quot;Lesotho&quot;</bucket>
              <bucket>&quot;Liberia&quot;</bucket>
              <bucket>&quot;Libya&quot;</bucket>
              <bucket>&quot;Liechtenstein&quot;</bucket>
              <bucket>&quot;Lithuania&quot;</bucket>
              <bucket>&quot;Luxembourg&quot;</bucket>
              <bucket>&quot;Macedonia&quot;</bucket>
              <bucket>&quot;Madagascar&quot;</bucket>
              <bucket>&quot;Malawi&quot;</bucket>
              <bucket>&quot;Malaysia&quot;</bucket>
              <bucket>&quot;Maldives&quot;</bucket>
              <bucket>&quot;Mali&quot;</bucket>
              <bucket>&quot;Malta&quot;</bucket>
              <bucket>&quot;Marshall Islands&quot;</bucket>
              <bucket>&quot;Martinique&quot;</bucket>
              <bucket>&quot;Mauritania&quot;</bucket>
              <bucket>&quot;Mauritius&quot;</bucket>
              <bucket>&quot;Mayotte&quot;</bucket>
              <bucket>&quot;Mexico&quot;</bucket>
              <bucket>&quot;Micronesia&quot;</bucket>
              <bucket>&quot;Moldova&quot;</bucket>
              <bucket>&quot;Monaco&quot;</bucket>
              <bucket>&quot;Mongolia&quot;</bucket>
              <bucket>&quot;Montenegro&quot;</bucket>
              <bucket>&quot;Montserrat&quot;</bucket>
              <bucket>&quot;Morocco&quot;</bucket>
              <bucket>&quot;Mozambique&quot;</bucket>
              <bucket>&quot;Myanmar&quot;</bucket>
              <bucket>&quot;Namibia&quot;</bucket>
              <bucket>&quot;Nauru&quot;</bucket>
              <bucket>&quot;Nepal&quot;</bucket>
              <bucket>&quot;Netherlands&quot;</bucket>
              <bucket>&quot;New Caledonia&quot;</bucket>
              <bucket>&quot;New Zealand&quot;</bucket>
              <bucket>&quot;Nicaragua&quot;</bucket>
              <bucket>&quot;Niger&quot;</bucket>
              <bucket>&quot;Nigeria&quot;</bucket>
              <bucket>&quot;Niue&quot;</bucket>
              <bucket>&quot;Norway&quot;</bucket>
              <bucket>&quot;Oman&quot;</bucket>
              <bucket>&quot;Pakistan&quot;</bucket>
              <bucket>&quot;Palau&quot;</bucket>
              <bucket>&quot;Panama&quot;</bucket>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
              <bucket>&quot;Paraguay&quot;</bucket>
              <bucket>&quot;Peru&quot;</bucket>
              <bucket>&quot;Philippines&quot;</bucket>
              <bucket>&quot;Poland&quot;</bucket>
              <bucket>&quot;Portugal&quot;</bucket>
              <bucket>&quot;Qatar&quot;</bucket>
              <bucket>&quot;Reunion&quot;</bucket>
              <bucket>&quot;Romania&quot;</bucket>
              <bucket>&quot;Russia&quot;</bucket>
              <bucket>&quot;Rwanda&quot;</bucket>
              <bucket>&quot;Saint Barthelemy&quot;</bucket>
              <bucket>&quot;Saint Helena&quot;</bucket>
              <bucket>&quot;Saint Kitts And Nevis&quot;</bucket>
              <bucket>&quot;Saint Lucia&quot;</bucket>
              <bucket>&quot;Saint Martin&quot;</bucket>
              <bucket>&quot;Saint Pierre And Miquelon&quot;</bucket>
              <bucket>&quot;Saint Vincent And The Grenadines&quot;</bucket>
              <bucket>&quot;Samoa&quot;</bucket>
              <bucket>&quot;San Marino&quot;</bucket>
              <bucket>&quot;Sao Tome And Principe&quot;</bucket>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
              <bucket>&quot;Senegal&quot;</bucket>
              <bucket>&quot;Serbia&quot;</bucket>
              <bucket>&quot;Seychelles&quot;</bucket>
              <bucket>&quot;Sierra Leone&quot;</bucket>
              <bucket>&quot;Singapore&quot;</bucket>
              <bucket>&quot;Sint Maarten&quot;</bucket>
              <bucket>&quot;Slovakia&quot;</bucket>
              <bucket>&quot;Slovenia&quot;</bucket>
              <bucket>&quot;Solomon Islands&quot;</bucket>
              <bucket>&quot;Somalia&quot;</bucket>
              <bucket>&quot;South Africa&quot;</bucket>
              <bucket>&quot;South Korea&quot;</bucket>
              <bucket>&quot;South Sudan&quot;</bucket>
              <bucket>&quot;Spain&quot;</bucket>
              <bucket>&quot;Sri Lanka&quot;</bucket>
              <bucket>&quot;State Of Palestine&quot;</bucket>
              <bucket>&quot;Sudan&quot;</bucket>
              <bucket>&quot;Suriname&quot;</bucket>
              <bucket>&quot;Swaziland&quot;</bucket>
              <bucket>&quot;Sweden&quot;</bucket>
              <bucket>&quot;Switzerland&quot;</bucket>
              <bucket>&quot;Syria&quot;</bucket>
              <bucket>&quot;Taiwan&quot;</bucket>
              <bucket>&quot;Tajikistan&quot;</bucket>
              <bucket>&quot;Tanzania&quot;</bucket>
              <bucket>&quot;Thailand&quot;</bucket>
              <bucket>&quot;Timor Leste&quot;</bucket>
              <bucket>&quot;Togo&quot;</bucket>
              <bucket>&quot;Tonga&quot;</bucket>
              <bucket>&quot;Trinidad And Tobago&quot;</bucket>
              <bucket>&quot;Tunisia&quot;</bucket>
              <bucket>&quot;Turkey&quot;</bucket>
              <bucket>&quot;Turks And Caicos Islands&quot;</bucket>
              <bucket>&quot;Uganda&quot;</bucket>
              <bucket>&quot;UK&quot;</bucket>
              <bucket>&quot;Ukraine&quot;</bucket>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
              <bucket>&quot;Uruguay&quot;</bucket>
              <bucket>&quot;USA&quot;</bucket>
              <bucket>&quot;Uzbekistan&quot;</bucket>
              <bucket>&quot;Vanuatu&quot;</bucket>
              <bucket>&quot;Venezuela&quot;</bucket>
              <bucket>&quot;Viet Nam&quot;</bucket>
              <bucket>&quot;Wallis And Futuna Islands&quot;</bucket>
              <bucket>&quot;Western Sahara&quot;</bucket>
              <bucket>&quot;Yemen&quot;</bucket>
              <bucket>&quot;Zambia&quot;</bucket>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (country)]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
              <size column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' />
              <text column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
              <text column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:population:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_tests:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{76073F52-DB16-4115-8502-1439CB6B136C}' />
    </worksheet>
    <worksheet name='Map ca nhiễm'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The number of coronavirus total confirmed by country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column caption='Population' datatype='integer' name='[population]' role='measure' type='quantitative' />
            <column-instance column='[population]' derivation='Sum' name='[sum:population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_cases_per_1m_population]' derivation='Sum' name='[sum:total_cases_per_1m_population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths_per_1m_population]' derivation='Sum' name='[sum:total_deaths_per_1m_population:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_tests]' derivation='Sum' name='[sum:total_tests:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_tests_per_1m_population]' derivation='Sum' name='[sum:total_tests_per_1m_population:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_cases_per_1m_population]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths_per_1m_population]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_tests]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_tests_per_1m_population]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' included-values='in-range'>
            <min>2</min>
            <max>84209473</max>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Longitude (generated)]' field-type='quantitative' max='27168824.166140702' min='-12906192.51943779' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Latitude (generated)]' field-type='quantitative' max='14741598.628403444' min='-10543247.212420538' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' num-steps='10' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#dee7ee</color>
                <color>#ccddec</color>
                <color>#bbd3ea</color>
                <color>#aacae8</color>
                <color>#98c1e6</color>
                <color>#88b8e4</color>
                <color>#77afe2</color>
                <color>#67a6e0</color>
                <color>#579dde</color>
                <color>#4895dc</color>
              </color-palette>
            </encoding>
            <encoding attr='color' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' num-steps='10' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#d6dce9</color>
                <color>#bcc9e1</color>
                <color>#a4b7d9</color>
                <color>#8da5d1</color>
                <color>#7894ca</color>
                <color>#6384c2</color>
                <color>#5075ba</color>
                <color>#3e67b2</color>
                <color>#2e59aa</color>
                <color>#1f4da3</color>
              </color-palette>
            </encoding>
          </style-rule>
          <style-rule element='legend'>
            <format attr='border-style' value='solid' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' value='Total confirmed (Color)' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='title' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' value='Total confirmed (Number)' />
            <format attr='border-style' value='solid' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_tests:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:population:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_cases_per_1m_population:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths_per_1m_population:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_tests_per_1m_population:qk]' />
              <geometry column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Latitude (generated)]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{E49B927D-4694-4242-8F52-0735E9D43A40}' />
    </worksheet>
    <worksheet name='Pie Chart'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontname='Tableau Light' fontsize='14'>The rate of total confirmed, deaths and recovered </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column caption='Active Cases' datatype='real' name='[Calculation_1275363152947314688]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([active_cases (worldometer!coronavirus!summary)])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
            </column>
            <column caption='Total Deaths' datatype='real' name='[Calculation_1275363152947662849]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([total_deaths])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
            </column>
            <column caption='Total Recovered' datatype='real' name='[Calculation_1275363152947752962]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([total_recovered])/(SUM([active_cases (worldometer!coronavirus!summary)])+SUM([total_recovered])+SUM([total_deaths]))' />
            </column>
            <column caption='Zero Asis' datatype='integer' name='[Calculation_275564034219474946]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Active cases' datatype='integer' name='[active_cases (worldometer!coronavirus!summary)]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[Calculation_275564034219474946]' derivation='Sum' name='[sum:Calculation_275564034219474946:qk]' pivot='key' type='quantitative' />
            <column-instance column='[active_cases (worldometer!coronavirus!summary)]' derivation='Sum' name='[sum:active_cases (worldometer!coronavirus!summary):qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1275363152947314688]' derivation='User' name='[usr:Calculation_1275363152947314688:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1275363152947662849]' derivation='User' name='[usr:Calculation_1275363152947662849:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1275363152947752962]' derivation='User' name='[usr:Calculation_1275363152947752962:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947662849:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947752962:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947314688:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947662849:qk]&quot;</bucket>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947752962:qk]&quot;</bucket>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947314688:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]' field-type='quantitative' fold='true' max='330' min='-368' range-type='fixed' scope='rows' type='space' />
            <format attr='display' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]' scope='rows' value='false' />
            <format attr='display' class='1' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]' scope='rows' value='false' />
            <encoding attr='space' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]' field-type='quantitative' max='330' min='-368' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]' value='p0.00%' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='color' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' value='Type' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='auto' />
                <format attr='wrap' value='auto' />
                <format attr='vertical-align' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='5' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1.087458610534668' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' />
              <size column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' />
              <lod column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]' />
              <text column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]' />
              <text column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' />
            </encodings>
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Total active cases:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Total deaths:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]>]]></run>
                <run>Æ&#10;</run>
                <run fontcolor='#787878'>Total recovered:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]>]]></run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='auto' />
                <format attr='wrap' value='auto' />
                <format attr='vertical-align' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='5' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='2' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <customized-tooltip>
              <formatted-text>
                <run fontcolor='#787878'>Measure Names:&#9;</run>
                <run bold='true'><![CDATA[<[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]>]]></run>
                <run>Æ&#10;</run>
              </formatted-text>
            </customized-tooltip>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='auto' />
                <format attr='wrap' value='auto' />
                <format attr='vertical-align' value='auto' />
              </style-rule>
              <style-rule element='datalabel'>
                <format attr='color-mode' value='auto' />
                <format attr='font-size' value='5' />
                <format attr='font-weight' value='bold' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='size' value='1' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-cull' value='false' />
                <format attr='mark-labels-show' value='false' />
                <format attr='has-stroke' value='true' />
                <format attr='stroke-color' value='#000000' />
                <format attr='mark-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk] + [federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk])</rows>
        <cols />
        <mark-labels>
          <mark-label id='1'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>0</value>
                <value>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947662849:qk]&quot;</value>
                <value>0.013081580284634454</value>
              </tuple>
            </tuple-reference>
            <label-position x='43' y='19' />
          </mark-label>
          <mark-label id='2'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>0</value>
                <value>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947314688:qk]&quot;</value>
                <value>0.029117990085990617</value>
              </tuple>
            </tuple-reference>
            <label-position x='-32' y='20' />
          </mark-label>
          <mark-label id='3'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields>
                    <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  </y-fields>
                </pane-descriptor>
                <columns>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:Calculation_275564034219474946:qk]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</field>
                  <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>0</value>
                <value>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[usr:Calculation_1275363152947752962:qk]&quot;</value>
                <value>95.7800429629375</value>
              </tuple>
            </tuple-reference>
            <label-position x='30' y='-21' />
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{6873AE23-DF2A-466B-9F28-AD47ED287EB3}' />
    </worksheet>
    <worksheet name='Scatter ca nhiễm và tử vong'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The relationship between coronavirus cases and deaths by country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' scope='rows' value='Total confirmed' />
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' scope='cols' value='Total deaths' />
            <format attr='height' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' value='64' />
          </style-rule>
          <style-rule element='table'>
            <format attr='omit-on-special' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' value='false' />
            <format attr='break-on-special' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' value='false' />
            <format attr='show-null-value-warning' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' value='false' />
          </style-rule>
          <style-rule element='legend-title-text'>
            <format attr='size' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' value='Total deaths'>
              <formatted-text>
                <run>Total deaths</run>
              </formatted-text>
            </format>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
              <size column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='2' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]</cols>
      </table>
      <simple-id uuid='{87BC1BF6-E866-4215-8ABC-6AF6E8FA60E9}' />
    </worksheet>
    <worksheet name='bar chart continent'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The total  confirmed, deaths and recovered  for each continent</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[continent]' derivation='None' name='[none:continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_deaths]' derivation='Sum' name='[sum:total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[total_recovered]' derivation='Sum' name='[sum:total_recovered:qk]' pivot='key' type='quantitative' />
            <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_deaths]' role='measure' type='quantitative' />
            <column datatype='integer' name='[total_recovered]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]&quot;</bucket>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_recovered:qk]&quot;</bucket>
              <bucket>&quot;[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <computed-sort column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]' direction='DESC' using='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' />
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]</rows>
        <cols>([federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk] / [federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names])</cols>
      </table>
      <simple-id uuid='{ECEDA78B-C9ED-42D7-9DAF-D8265A9DCB1B}' />
    </worksheet>
    <worksheet name='Đường ca dương tính'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The number of coronavirus  active cases by day for each country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='integer' name='[active_cases]' role='measure' type='quantitative' />
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[active_cases]' derivation='Sum' name='[sum:active_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases:qk]' scope='rows' value='Active Cases' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{57A31123-F6C4-4269-AF98-20D57065F311}' />
    </worksheet>
    <worksheet name='Đường ca nhiễm'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The number of coronavirus new cases by day for each country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[daily_new_cases]' role='measure' type='quantitative' />
            <column datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[daily_new_cases]' derivation='Sum' name='[sum:daily_new_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:daily_new_cases:qk]' scope='rows' value='Daily New Cases' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.62569057941436768' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:daily_new_cases:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{29F7833D-AB62-4B40-AC9C-2C4D46BCA343}' />
    </worksheet>
    <worksheet name='Đường ca tử vong'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>The number of coronavirus new deaths by day for each country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[daily_new_deaths]' role='measure' type='quantitative' />
            <column datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[daily_new_deaths]' derivation='Sum' name='[sum:daily_new_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:daily_new_deaths:qk]' scope='rows' value='Daily New Deaths' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.66966849565505981' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:daily_new_deaths:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{D25B0BDF-5D07-4253-AE23-185C8FD5A31E}' />
    </worksheet>
    <worksheet name='Đường culmulative cases'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>Cumulative coronavirus cases by day by country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[cumulative_total_cases]' role='measure' type='quantitative' />
            <column datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[cumulative_total_cases]' derivation='Sum' name='[sum:cumulative_total_cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:cumulative_total_cases:qk]' scope='rows' value='Cumulative total cases' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:cumulative_total_cases:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{8CB8B790-F85D-4FE5-AD5F-E3513C7A71CB}' />
    </worksheet>
    <worksheet name='Đường culmulative deaths'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#4e79a7' fontsize='14'>Cumulative coronavirus deaths by day by country</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
          </datasources>
          <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
            <column datatype='string' name='[continent]' role='dimension' type='nominal' />
            <column caption='Country' datatype='string' name='[country (worldometer!coronavirus!summary)]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[cumulative_total_deaths]' role='measure' type='quantitative' />
            <column datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[country (worldometer!coronavirus!summary)]' derivation='None' name='[none:country (worldometer!coronavirus!summary):nk]' pivot='key' type='nominal' />
            <column-instance column='[cumulative_total_deaths]' derivation='Sum' name='[sum:cumulative_total_deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]'>
            <groupfilter function='level-members' level='[country (worldometer!coronavirus!summary)]' user:ui-action-filter='[Action2_A1EE75BF05844BDAA6A5AA3D4160E3F0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]'>
            <groupfilter function='level-members' level='[continent]' user:ui-action-filter='[Action5_675FBAC38C444A559F682680782CF4D0]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:country (worldometer!coronavirus!summary):nk]' />
              <groupfilter function='member' level='[none:country (worldometer!coronavirus!summary):nk]' member='%null%' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (Country) 1]</column>
            <column>[federated.1mvbxbv09wel1v1800s2r0asbms6].[Action (continent)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='height' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]' value='64' />
            <format attr='title' class='0' field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:cumulative_total_deaths:qk]' scope='rows' value='Cumulative total deaths' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:cumulative_total_deaths:qk]</rows>
        <cols>[federated.1mvbxbv09wel1v1800s2r0asbms6].[tdy:date:qk]</cols>
      </table>
      <simple-id uuid='{0771FEA1-E39D-4BFE-BF2A-8448179D5641}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard covid'>
      <style>
        <style-rule element='table'>
          <format attr='background-color' value='#f5f5f5' />
        </style-rule>
      </style>
      <size maxheight='3000' maxwidth='1657' minheight='3000' minwidth='1657' sizing-mode='fixed' />
      <datasources>
        <datasource caption='worldometer_coronavirus' name='federated.1mvbxbv09wel1v1800s2r0asbms6' />
      </datasources>
      <datasource-dependencies datasource='federated.1mvbxbv09wel1v1800s2r0asbms6'>
        <column-instance column='[total_confirmed]' derivation='Sum' name='[sum:total_confirmed:qk]' pivot='key' type='quantitative' />
        <column datatype='integer' name='[total_confirmed]' role='measure' type='quantitative' />
      </datasource-dependencies>
      <zones>
        <zone h='4533' id='9' name='Chỉ số' w='75679' x='12010' y='1500' />
        <zone h='18867' id='20' name='Map ca nhiễm' w='49608' x='2655' y='7167' />
        <zone h='2967' id='21' name='Map ca nhiễm' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' show-domain='false' show-null-ctrls='false' type-v2='filter' w='19795' x='53530' y='8833' />
        <zone h='2900' id='22' name='Map ca nhiễm' pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' type-v2='color' w='18407' x='74351' y='8867' />
        <zone h='18733' id='26' name='HeatMap' w='52505' x='8932' y='27633' />
        <zone h='18200' id='27' name='HeatMap' pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type-v2='color' w='7061' x='1328' y='27867' />
        <zone h='11967' id='55' name='Đường ca nhiễm' w='57393' x='1267' y='61067' />
        <zone h='12233' id='56' name='Đường ca dương tính' w='57212' x='1086' y='87633' />
        <zone h='19567' id='74' name='bar chart continent' w='34218' x='62342' y='26967' />
        <zone h='17433' id='77' name='Đường culmulative cases' w='38564' x='59505' y='61733' />
        <zone h='18367' id='78' name='Đường culmulative deaths' w='38141' x='59928' y='80800' />
        <zone h='13600' id='79' name='Đường ca tử vong' w='57272' x='1267' y='73367' />
        <zone forceUpdate='true' h='1300' id='100' type-v2='text' w='88473' x='5552' y='-33'>
          <formatted-text>
            <run bold='true' fontalignment='1' fontcolor='#499894' fontsize='20'>DASHBOARD</run>
          </formatted-text>
        </zone>
        <zone h='11700' id='131' name='Pie Chart' w='32891' x='55341' y='13600' />
        <zone h='3567' id='132' name='Pie Chart' pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' type-v2='color' w='8509' x='89439' y='15100' />
        <zone h='12500' id='135' name='Scatter ca nhiễm và tử vong' w='80205' x='1750' y='47600' />
        <zone h='5533' id='136' name='Scatter ca nhiễm và tử vong' pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' type-v2='size' w='9475' x='84490' y='49767' />
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='3450' minheight='3450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='158' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='99466' id='157' param='vert' type-v2='layout-flow' w='99034' x='483' y='267'>
                <zone forceUpdate='true' h='1300' id='100' type-v2='text' w='88473' x='5552' y='-33'>
                  <formatted-text>
                    <run bold='true' fontalignment='1' fontcolor='#499894' fontsize='20'>DASHBOARD</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='136' h='4533' id='9' is-fixed='true' name='Chỉ số' w='75679' x='12010' y='1500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2967' id='21' name='Map ca nhiễm' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' show-domain='false' show-null-ctrls='false' type-v2='filter' w='19795' x='53530' y='8833'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='18867' id='20' is-fixed='true' name='Map ca nhiễm' w='49608' x='2655' y='7167'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='2900' id='22' name='Map ca nhiễm' pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' type-v2='color' w='18407' x='74351' y='8867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='11700' id='131' is-fixed='true' name='Pie Chart' w='32891' x='55341' y='13600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='3567' id='132' name='Pie Chart' pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' type-v2='color' w='8509' x='89439' y='15100'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='19567' id='74' is-fixed='true' name='bar chart continent' w='34218' x='62342' y='26967'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='18733' id='26' is-fixed='true' name='HeatMap' w='52505' x='8932' y='27633'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='18200' id='27' name='HeatMap' pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type-v2='color' w='7061' x='1328' y='27867'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='12500' id='135' is-fixed='true' name='Scatter ca nhiễm và tử vong' w='80205' x='1750' y='47600'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='5533' id='136' name='Scatter ca nhiễm và tử vong' pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' type-v2='size' w='9475' x='84490' y='49767'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='11967' id='55' is-fixed='true' name='Đường ca nhiễm' w='57393' x='1267' y='61067'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='17433' id='77' is-fixed='true' name='Đường culmulative cases' w='38564' x='59505' y='61733'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='13600' id='79' is-fixed='true' name='Đường ca tử vong' w='57272' x='1267' y='73367'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='18367' id='78' is-fixed='true' name='Đường culmulative deaths' w='38141' x='59928' y='80800'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='12233' id='56' is-fixed='true' name='Đường ca dương tính' w='57212' x='1086' y='87633'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{98B8FFEC-E3B0-41AF-B365-136B0CB9ABA1}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='Map ca nhiễm'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:total_deaths:qk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:active_cases (worldometer!coronavirus!summary):qk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_confirmed:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B1AD0870-0877-4262-8A68-E6E27CA376D0}' />
    </window>
    <window class='worksheet' name='Scatter ca nhiễm và tử vong'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country:nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:daily_new_deaths:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ED055752-C853-4FD3-8F53-106460639BB5}' />
    </window>
    <window class='worksheet' name='HeatMap'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A3E8435E-4DC4-400F-9153-CB195A7D6D47}' />
    </window>
    <window class='worksheet' name='Đường ca nhiễm'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0BD4360A-9B1C-490C-9D96-6F1D542BF079}' />
    </window>
    <window class='worksheet' name='Đường ca dương tính'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9B214EC2-6430-417F-9EDC-DD8704FC32D8}' />
    </window>
    <window class='worksheet' name='Đường ca tử vong'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D09E0794-8ACF-409C-881D-6FE22E29F98A}' />
    </window>
    <window class='worksheet' name='Pie Chart'>
      <cards>
        <edge name='left'>
          <strip size='240'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' type='color' />
            <card pane-specification-id='1' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[Multiple Values]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{49AD6F54-583F-4138-9C49-20F2E42B921C}' />
    </window>
    <window class='worksheet' name='Chỉ số'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BBFBAEAF-C5E7-47E6-B341-437EA299E3AF}' />
    </window>
    <window class='worksheet' name='Đường culmulative cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B04FE2C0-DF95-4352-900D-E5A47686871B}' />
    </window>
    <window class='worksheet' name='Đường culmulative deaths'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{50633DAF-E164-4DB8-8923-C385DF7112B3}' />
    </window>
    <window class='worksheet' name='bar chart continent'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]</field>
            <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:continent:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{54F00EB4-45E1-49E9-93F7-F9CD79AE28D2}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard covid'>
      <viewpoints>
        <viewpoint name='Chỉ số' />
        <viewpoint name='HeatMap'>
          <highlight>
            <color-one-way>
              <field>[federated.1mvbxbv09wel1v1800s2r0asbms6].[none:country (worldometer!coronavirus!summary):nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Map ca nhiễm'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Pie Chart'>
          <zoom type='entire-view' />
          <highlight field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[:Measure Names]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Scatter ca nhiễm và tử vong'>
          <zoom type='entire-view' />
          <highlight field='[federated.1mvbxbv09wel1v1800s2r0asbms6].[sum:total_deaths:qk]' type='size'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='bar chart continent'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Đường ca dương tính'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Đường ca nhiễm'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Đường ca tử vong'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Đường culmulative cases'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Đường culmulative deaths'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='20' />
      <simple-id uuid='{545E3A80-0210-4B58-AE54-1B3C3F871394}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='105' name='Chỉ số' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAABpCAYAAABszywhAAAACXBIWXMAABJ0AAASdAHeZh94
      AAANy0lEQVR4nO3de3gV9Z3H8feZy7nkhIASIAkgMVwMJGAAWa4atIALD5eHhQqWlUXcLo+r
      jzTbbrdityv4aLfstm6tt90VpFAeq8IqYNVHkIpQykUCchGCkMYIIURQEsnlzJyZs3+ck+Qk
      5J5DAsz39Q/zZH7nN7ffZ+b3mzmHcYVCoRBCOJTS2SsgRGeSAAhHkwAIR5MACEeTAAhHkwAI
      R5MACEfTmivgcrk6Yj2E6BTNBqCaPC8TNyLpAglHkwAIR5MACEeTAAhHkwAIR5MACEeTAAhH
      kwAIR5MACEeTAAhHkwAIR5MACEeTAAhHkwAIR5MACEdr8e8BrnunnuDbLZuAwbj/7k08N3f2
      CrVBsBBz+zICp44RCpjAUDwPvoa7W2ev2LUj+G4mlXnhaW3GUXwDmi7f9gDUNKgw123P4582
      kejfj9l7v0v57uNc143umlGA8fpsAiVm1N+ChOxOW6HYi2pTLWm8sRCzK0Ao71XMCRNxJ8Sq
      RlHHuU0YkcavDP1v4u4Zj0sJwo0UgBjQph2ly7SWl4/hGOAA5qFjsatO1FVeQvWPUpXU8bgU
      AE1Gce0UkyuAljaZYP5W7IOvYI55Ft3dVOmPqHz2UYIAtz1Pl2kTa+bU9t9m4ct5OrJyteWV
      cRvxJW4j8PF6gpfKQOuOmvkLfHffAV++SdXOlwmevwhKAsrgFfgmTUJpqIHYF7H2PkXlvm2E
      gjqubtnoU5bj6d21XrkizB3/hnH8E+yAGV5e2g/w3DsbNWrP1Xb1Iutd+g6VG5YTLEttuutn
      X8Q69J8E9m3DqqwEJQFXj2zcd/4Id9/uV+6v6v20JZNvgWa7lsFCzJ1PYeQdwo6u/+6f4k72
      VxciFL3v0HH5M1Dv+Ce8WSMiQWvq+NBI16WAwLrpGBcIH+fsBIyPfoWRfyi8z3vMxjNjGXpX
      rZltBGXcO/hHp145jov7lMCmhzGKymqW22S3u3QbVR/8mmDRX8JdR19WjLpAg+ehn92KGdiK
      ebQYfURSTKqtz94zn3I7qg8cvIh16GHK8xMJlZ2LKliGfewHVCVuI+6KdTmF8dokjGB1PSah
      S9swNpyHBevwJEZ2iX2awGtza7odNcs7+a9UFJ3G99CP0BoM136qXvsJwcrmNuY0xuvzCRRH
      FbTLCJ3fQmDDnwnevYq4rP7NVNKEqo+oXPNo3fWI1G8WLokEIIi9fzHlu3KjCpmEyg8R3LGQ
      8vyfEfc39zV8EmmNwqe5/Mq5qPGKSeirN6ja2B1l8SOobaq0GGPzIowis/miABdWU77+V9jR
      XcbKQzEKgDIG95iRmDsOYO17lWDW4w03jnZyJS/Ce/eDaD0S4NJaKl5diYVJyD0R77zFaEnJ
      uCrfpvKVnxK0wSo6ClcEIA719mfwjhmP4rawT6yg4r1NhOwjGH/ainvWVFyAtXtppPEnok19
      A1/6zYSKV1Px+nPYl9cQ2D0dbUJ6vbpNrF3LMZtr/IC9/yeRxp+Imv0CvqwMXMFjBN78W4yS
      C1g7nsFIW4U7YSK+nKOtHCAWY2zOiTT+RLRJq/FmpOGiAvvLTZhVkcP+9VoqI43f1fcJfDO/
      i6oZWHsfomLPEUJf/pyqw3cRl9XOE5qeiT75Rdx9b8WllWJumkRVgQmluVjloPpbv42ho89g
      nG1h4+cEgc2Rxu+bhXfBz9D9Ftbeh2LXg1Qy54cbfeUbmHnlsaq2Dle/WeHGD9Dtlto7Tt3H
      o6ckhy/X/iyU6sveN4UNjBFTUDOzUdwa4EFJX4YnNTKrYA8WAPsxDxeE/5b2L3jTewIarqTF
      eIaEu0n2yQ8jZaNtxThYAPHT8MzbTpecxron+zEOHA9PJi/BOyIjvO7uDDwzfhw+I9p7MQ+f
      aOGeqadkI2akcSgjX8A3NC1cvxKH0u9+PLf1ASB4cFVk/4zEPeV+VLcGShzq2GfxJAOYWLkb
      G9jOVkqehaf/QFxuDZTuqCnVLbuMUKAtFZ7CPLgdtBHoMzcTv7SZE0LhW5ilADpa9jL0Lp7w
      do5eGsMhlHsyemYiYBL85PXr6OaEHzVlcHjS/gzra+DScazIgVGSBkfd2tVQU0aGJ0vzsI36
      dZmQ+H3iHliJO6Vn44uMrv/WsXUPQsJfoUZCYxcdpi3/G5P9xa7I/h+INiSjkVJnsItLw5OJ
      2Wh17t4lofUbGJ6MnKWvLSZ4JuNduBpv/7Q645SG2Oer9+MAlF7+2hnK0Fg+CNPQRi1BPfw0
      1oVVGAULaXIsfC2za4dj9u7pfLu7oULnsC8Ddc7wd+GdsxTV2/L6r6TW3tkJXCYEtPr/5qup
      v6m7RM08Q1Cqm0bkLO1vomyH640+4z8iA+gWqNkfxzF+m0n0eSu2PfWEmehpOlCKefD9Np29
      OkXNDkrA5WlPRTfhaq7xQ1TjaohVe2/fE9/6xl+n/qaeE2hNnzljtk+uhgRcvticu2P8VQg/
      +ti/x8h/CbvgZQzFF9vqr4pigl98Hp70DEDxA/5BqArYNriGryd+4u2xXWS3wagesANg/+XP
      2KNTa89EZfvC3TBASRnWpgAo/Sag7DqCzecET5zAc8VgHaAPSlJXKCmFCzsIli2OeogZtU+6
      jkC9ps7+raf0GAIcB3qj3/cHvL1rm33s79X0nIOeDFBAMP94AwWizjwXP8MKAsEy7KK3Mc81
      UDzmygiVloUngyUEP84hEFmuMmx25IwwBi0zEYDQwaVU7N2HbUTOiMEy7KIPCGx5maY6Mk0b
      hXtkZNxx7nmqPjkW7o6U5xLYsjI86FRGow9rqOG2QM856L11AOwDP6bqRH64frsCu+htjLwz
      AGjDq++CHMB4fy2WEQw/m6jZJzrqiDm1tykVPTJxEqskAAQIfXME8+Shtq1nff6eNYG3jmyI
      XIQChIy272kAUqej+wDOYm55lMAXtbdkr8KX4ZJwj5mP8dbvG+kCDUdN1THzTbjwIhW/eTHy
      d18HfTXvLObb47jiBlq3h/GOq25wGtr4J9HzczAvX8DavZjyK8YBs2jP9U0Z9e948ucTKC7F
      2jmPyzuj5yaiZi9rx9dKknDPfBZ7XQ7m5XzM92Zivhe17HHvhMdnNy/EN+EjynflEjq7kooX
      VtapxdX3cbzDam+Bqv0mwvGtwHGM9SNr+9JajK70ybNw91xDoMQkVPAk5b95smZ9/aNT216v
      MgrPpDkE/7CRUOUujP+bXLPuV+dBeupc9K6NzfSj3/sSeq/Ik04lAaXPIryLduFrx3OfFlGG
      4r5/M75xM1B9kYPmSULN+CX+Bx5Bjd4b3ol4H9yEN2ssii/qAHuSUG99GM+cJe3Lq9If97z3
      icuOWhclAVevGXjmbmzfQzBoeP0j9eu39IgU0lBGrSZ+7hNo1ccDHZc/Cy17Lf56D8Fcg5/E
      l5WFS4uU6zYWfeq7dJk6pX3rWiMV95w1eAZVLwPQuodvn7aTa8By4hf+Er3PoNq60XE1957g
      6vcDyH+PLm5E8lUq4WgSAOFoEgDhaBIA4WgSAOFoEgDhaBIA4WgSAOFoEgDhaBIA4WgSAOFo
      EgDhaBIA4WgSAOFoEgDhaC3+pUH17wKEuJHIFUA4WouuAPJrMHGjkiuAcDQJgHA0CYBwNAmA
      cDQJgHA0CYBwNAmAcDQJgHA0CYBwNAmAcDQJgHA0CYBwNAmAcDQJgHA0CYBwNAmAcDQJgHC0
      Dnkvo6jHquJ07jHW/OkMpy9WUm6B5vWRNiidRdMHkhGvtK985DPH9hxgzc5i8stMgij4E+Lp
      P7AfcydlcHujLzF0lha9JE9+EhlDX51ixapcDpQ18gp3/y0syxnH6Lg2lgewLrHhpQ9YV9Tw
      ZyYumE9ORpu34IYiV4COVlLCgTJI7DeQ+6emM763H59qU1lSyP/+bh8fXijkua1prJ+V1Lby
      mHzy1h9ZV2SjJfThwe8N5zvVn7lcyuef5lNwnb/5PZYkAB3MUrtx3/dHMP9Wb+0b2FHw9Uzl
      sXuL+HB9IZfLqggAnjaU56uTrMsNgLcPP3xsAuPioj4TfxPDxo9kWIdt7bVPAtDB1PQhLGhk
      XkUg/P56zaeHG3Mbyp89WkgBkHrnsKjGLxojAbhGGEV5/OK9c4CHKcOT21z+TEkpoDOgq8G2
      dz5k06dfU1hugaqTcksq35udxZ2JaqP1Oo0MgjubVcWxj3ezcmsJl1BJ/+vJPHNXNxptok2W
      L2PDc++yrriJ5ak+piyYxiPpeqy35LokV4BOYVOSu5vH3zrDBUshMXMkP19xDymNHo2Wltfx
      e8P/TntoDkv615ttneOlp3fw/trtpPzwXmZ3j/FmXYckAJ3g22N7+OcNZ7ikd+e+xXfWG+C2
      p7yPPr10KDD5rLAM+ifUna366dENKLaxGrmr6jTyJLijVeTz698Xckm9iQf+8TssaKbxt7b8
      kCF9iQcKdudxxKo3M/A1n38FEEf3hCs/60QSgA52dm8e+y3oMe4O5vZqfve3trw6MJ25KQqU
      n+ap//mUw9+YWIBRWsyG3x1kjwXa4H6M9jRblSPIILhDmfzxtxv5r7xmiiUN5cXHMujd6vJh
      1vmTrHgll0PlDZT19+SRf7iHKT1av/Y3IhkDdKhKLpZezfJhaq9BLM/pwbbtuWzMvUhRlQ26
      h0GDh0S+O9T6Om9UcgUQjiZjAOFoEgDhaBIA4WgSAOFoEgDhaBIA4WgSAOFoEgDhaBIA4WgS
      AOFoEgDhaBIA4WgSAOFoEgDhaBIA4Wj/DxRLGeKS0qHWAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Dashboard covid' width='192'>
      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
      cRoAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='HeatMap' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Map ca nhiễm' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Pie Chart' width='192'>
      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
      8QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Scatter ca nhiễm và tử vong' width='192'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='bar chart continent' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Đường ca dương tính' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Đường ca nhiễm' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO3daXAkZ37f+e+TR2XdhaNwXw303Tx6yCYpkqO5qGuGGkueiZG0s/Il+ZDC
      6xg5djfscDjsfeVYX4qVNhwhX+uQVpYlU+MZaTgakhoOb3J4932gcQOFQqEKqLsqq/J6/ALN
      JjkESDbYDYJTzyeCQaArM+upQv0qM598/vkIKaVEUTqU9nE3QFE+TnsSAN/39+JpFOWGqT2A
      0tFUAJSOpgKgdDQVAKWjqQAoHU0FQOloKgBKR9tlACT57Aq5Qgmv3WR2bgEvCFhdXqBcs2k0
      6ritJg3bubmtVZSbTOxmKIRsV7mcqRI0Spghg5HBHhazJWKJHux6kUjYpNW0OXTsNkxd4Ps+
      uq7fivYrykdi7GYlEYpjeassFysMjwwQiUbw2jmsvgheS6deLeLKKLq2dRU4CALUkCNlP9rV
      HgACFmdnCUIx0nGTxdU8U4cOkVmYJdrVTzQkiJgabRGhJxlVewBl39plAG6MCoCyX6leIKWj
      qQAoHU0FQOloKgBKR1MBUDqaCoDS0VQAlI6mAqB0NBUApaOpACgdTQVA6WgqAEpHUwFQOtqu
      6gGQLq+/+iaOMBhLJ9is1OgZGKaQzRKKJYmHdTTfITU0SVfMuslNVpSbZ3cBQCA00BDYvsbJ
      O49x+vQ0I5PHqBfXqFc3cEWC8WhIFcQo+9ruAhB4SGGgBZJwSHD23DQDY6NkF6ex4imSXf2Y
      +GzWbNLJKICqB1D2JVUQo3Q0dRKsdDQVAKWjqQAoHU0FQOloKgBKR1MBUDqaCoDS0VQAlI6m
      AqB0NBUApaOpACgdTQVA6WgqAEpH291waN9lZm6OzXKTI5NDZNY2ODA1RWZxnmhXH9GQICQC
      RLSHlCqIUfaxXQ+HloHL1dlldBEwdWCQc+fnGBg/RL20RqtZxhNxPnXHMYIgIAgChBA3u+2K
      8pHtsiIMCtkM6aERipl5qtUaoWiUZqOG43rEkz20G01aniRibtUBqHoAZT/a9R6g0WgQi8UI
      vDZLmTwTE6MUsitEewYx8LFMHdsJiEXDqiBG2bdURZjS0VQvkNLRVACUjqYCoHQ0FQClo6kA
      KB1NBUDpaCoASkdTAVA6mgqA0tFUAJSOpgKgdDQVAKWj7ToAtdIGCytZvHaT2bkFvCBgdXmB
      cs2m0ajjtpo0bOdmtlVRbrrdBUC6XLw0jUCwsLDEYG+UK1eu4ogY2cwS+fw6s3PzhELmTW6u
      otxcu54hJhTrwa8WaZkhItEIXjuH1RfBa+nUq0VcGUXXUFMkKfvaLusBJMvzM9RdndG+BIur
      eaYOHSKzMEu0q59oSBAxNdoiQk8yquoBlH1LFcQoHU31AikdTQVA6WgqAEpHUwFQOpoKgNLR
      VACUjrZjAIrFIrOXz1Kst/eyPYqyp3a8Enz6tedwRZSepsZ9p+7YyzYpyp7ZMQAnjt+OsBKE
      ol172R5F2VM7HgKdffNVltdWmb86u5ftUZQ9tWMA+geGOPvyy6THxveyPYqyp3YMgIvOQH+a
      jbXVvWyPouypHc8BoiGTk/c9gGEm9rI9irKndgzARj7LG2fPceeDP8/IwHtPhN949SUS6RGi
      tNmo1OgZGKaQzRKKJYmHdTTfITU0SZeaIknZx3YMQHp4nJrtokl3m0clPd095DeLyK4EJ+88
      xunT04xMHqNeXKNe3cAVCcajIVUQo+xr2wZgcWGB2+68lxPHjrGSb753gcDHCyQIQSwkOHtu
      moGxUbKL01jxFMmufkx8Nms26WQUUFMkKfvTtgEoZOexfYFXzhAkJ967gGZw+Ojx67+OXltk
      ZKD/ljRSUW6VbSvCZOBz5eJ5jHiaw5OjH/lJVEWYsl9t2w0qNB1N1+lKxVGH7sqPsx2vA2iB
      w5/96R9zfjazl+1RlD21YwAq1TrHjx8lZO56KmFF2fd2DIDvNKnaMJBWg+GUH187BqBUKpFI
      mszNrOxlexRlT20bANd1mDp8lMLaJlOH1WA45cfXtgFYmrnI7FKWKxfeZHY5t9dtUpQ9s+0Z
      bqNaZm19k5/7xV/h0Li6uKX8+No2AINjU9wXSwMBnu/vcZMUZe9sewg0MDKB26zQ0z9MdzK2
      121SlD2zYy/QxPgo3/6TP+CRb36HSsvbyzYpyp7Z8e7QF8+f4fDxO9F8G1eEiYR2P5ZHjQVS
      9qttA3DhjRe4MLM1BOLUpx/i8Nh7T4RrxRxvTq9yeLiLfLFC3/Ao65kMVjxFPKyjBy7x/nG6
      YpYKgLJvbXsSbEYSpLtibJQb264kfZeF1Q2SUYN6W3LyzqOcPj3N8ORR6sU1quU8rkgwckAV
      xCj727YBOHriJNXNPJulMl4g3vO4lNCdSjC/uEQqGubsuSukh4dZXbiyVRKZTGNITxXEKPve
      jiPdpGESjYaplYow0feuxzTDZGx8grHxdxfLjA8P3ZpWKsotsm0vUKNSoFis42tx7rjt8F63
      SVH2zLYnwS+/+Cx33PMgsp7nymqDe+488pGeRJ0EK/vVtodAWtDm0W//DwCO33X/njZIUfaS
      miVS6Whqggylo6kAKB1NBUDpaCoASkdTAVA6mgqA0tFUAJSOpgKgdDQVAOUTTcrgI62/y/se
      BizMzNDwNcb7Uyyu5pk6dIjMwizRrn6iIYGlSQIrRUrNEKPcIlIGPJ19nIdGHt71NnYZAI1k
      Ms7mWoncZoXbjo5z/uI0/aNTNMo5KoUyvohz8o4+VRCj3DJe4FJsFfC83des7y4A0ieaSmOt
      5HB9HbtpY1gW7ZaN6/nEkz206g0cX2IZW2OA1Fgg5WZzPYeGX8cwdn8D512uKdjMrZIcHGGk
      L8liZp1jx46wnlmie3QCU/OxRgzstoNlhHfdOEV5P17g0nBrH2kbuwuA0Bg9MHX910MHJwEY
      GZ9812KJ0O4bpigfpOk3cQOXQAZoYnf9OaoXSPnEqrsVEmYSN3B2vQ0VAOUTq+KU6Q334wbb
      TeX74agAKJ9YTa9OKtSt9gBKZ2r7LXUIpPz4WqzNUmpv7vi4L33CRkQFQPnx0nBrSCk5vfkK
      T64++q7HAhlwuXTu+oXVkGbh+G2KrQ3Obb5+w8+lAqDsO09lv0fTa+D4bRz/3d/ubuDwSv45
      nKCNqYW2AhA4bLTXqbmVG34uFQBlX1iszTJfvYqUkppboeIU0YWOoW1dqnrrG7/U3qTmVnit
      8CKmZhLSLepujR+sfpe2377h51UBUPaFgp1jo7VOIH1sr0nZKZEMddFt9eIHHi/kngSg6pR5
      cOAhak4ZQxiENIvF2gwH4ocI5I3PZqQCoOwLxfYGdbfK5fJ5TvbeS9Oro137eNq+zVpz5drP
      TQajIzS9BoZmYukW2eYK9/V/FsmND7hUAVD2BYnElz7Z5jKHksexvSa6piMQtPwmVbeCH3jY
      XpO4mcD2mxiaSUSPEjGipEJdKgDKJ1MgA3ShX/8Ah/UItt9EFwamZlJzKniBhxu4tHybiB7F
      DRxCmoWuGXxt8m+ii90Na9t1AMqb62RyGwRem4XFFQIpWV9dpmY72LaN77ZptnbfP6t0Dttr
      EDFi1we1mXqIqlPG0sOYWoiSUyRuJggIrvf+GMIkpG0VW3VZPQixNY/Fjdad7DIAAYEIUSnk
      mJmZozuhc2V6hrpnsrwwRy63xuzVGXRz9+O0lR9fb268jPeO8TtNr0nUiBFIH13o6EJno5Vn
      KDpKzEywUL1Kf2To+kmuEIJ0uB9TM9+1XV0Y+Dd4IrzreoBmdZNU3yCtWolkMsHCUp7u9DCB
      U6de3cQliqkJVRGmvIsbuDybfZzDiRNE9K1v7ZpTIaJFkFIiA/A8j5gRp9fsx/EcbL/JsDFO
      y22B3Hr80wM/jSnMd1WD6ejYbpMXcz/gvr7PkAx1fWB7dlkR5pEvlIimNPq741y4vMjBI4fJ
      LM4T7eojlUoSNqBUs+lVUyQp71BvV4kYMZpBHTRJwkxhB01SVjehpkXEjGIYBvcPfI5oKEa3
      7OVA4hCWYeHINiHdwjAMkkbqPdu2DItCO8d6O0szqNNjpD+wPbssiDG5+957r//a07c1NdKJ
      2+/Y1eaUH381t4JAo+HVGYwOk6kvcb74On/r6D+g6dYZjo6iawaD0READqdOANBjpXlw4CEu
      lE7T8pvXL4xtx9RC13uR6t6HqxRTB+nKnpivXgUkESNGf3iIvJ2l5bdwAhfbbxLWo9zefRep
      UPe71hNCIBCYwqTpNTC1ncsMw3qEpfo8d6fvp9gqfKh2qW5QZU/U3SpNr8l8dZrh2Dib7QLp
      cD+218SXPoZm0B8ZwtK3ryE3NZO6W9vxcYCIEWWzlac/PEjT236K3x+lAqDsiYZXp+ZWMLQQ
      vVYfZadIX3gA22sQSP/6Vd+dGJrJTPUSlrZzAMJ6FE1oRIwo7aBFza3y/Nr333e7KgDKnpBS
      4gUuutAJ6RamMBmKjrHZLmwFQLx/J4mpmeTttfffA+hRokYcTegEMmCxNsN87er79kCqACi3
      XN5eu3YRa+vqramFiBgxxuNTLNZmAHH9QtZOeqw+xmKT7xsA89rQCNgKXKaxxHh8Ettv7riO
      OglWbrmZyiUSZhIpJX3hATShMRgZxtLDHOu680NVdEWMKAeTx4gY0R2XCekWB5NHASg7xes9
      SQ23TtSIbbuOmiVSueWeXXuC+/o+Q6GVY+DaB19K+YHf+j/qrY/qh1nvL5b/lM8PfZGl+jwJ
      M8VY/MC2y6k9gHJLBTK4NtjNYDz+9s3UbvTDf6PrfHH0q+iahqWHafutHZdT5wDKLWN7Df7T
      5d/GC9xd37ltt3RNBwRhPUw7sGn7Ldab2fcsp/YAyi0zX71Kyuqh4dX3PABvsfQwV0rnsbQw
      i7VZBqLD73pcBUC5ZcpOibHYAZbrCwhu/JDnZrC0MIv1WSw9vO0hlDoEUm6ZplcnHR6gK9S9
      q2P+m8HULQzNpNDKoW9zrUEFQLklAhkgkXRbvUwkDn1s7bA0i1878g3uSt+PLgyklPjB20Oo
      d30ItHDlDG5kkDgN8sUKfcOjrGcyWPEU8bCOHrjE+8fpUlMkdZyqU0YTOlEjRn9kkL7w4MfW
      FiEEyVCKT/Xex7PZJ7D9Jn+++N/42tTf3Kos2+2GR8cnWd5o0GhLTt55lNOnpxmePEq9uEa1
      nMcVCUYOhFRBzCeABDYbLqmwQa3tEw1phI3dHxx8Z+lPuL/vcySMFJ5347cquVUsLczl4jl8
      GZCpLTEWm9xtAHwW5+dZKbaYHOnl7LkrpIeHWV24QiiWJJ5MY0iPzZpNWhXE7GvVlkeh4ZKr
      OkgcAgmuH/DggSQR88b/ZjW3QsOts9xY4FDq2Eeavuhm64308XzuSb409lXWmhkmjcO7DYDO
      4dvv4vCP/Ov48NBHbqSydxqOz1OzZQIJXz7Rw5nVrSHEx/ojTOdtNpouIV3j1Ggcxwvojpof
      sEVYbSxzR8/dXC6f4+70/be0/dlKhlq7ytH+Ex9q+fH4FCd77qEvPMil0hlAnQR/orU8+0OP
      e38nL5DU2j6vLNe4ZzRBSBeYmqAvbjKYMEnHTNbrDomQTsTUeG2lxmuZOq4f4AVy28PZxdos
      pzdeYbk+z/HuOxEI4maC9vP/DzL4aHP5vpOfPYO38BwA8xszzG3Mfuh1LT3Mqb4HMbS3i+dV
      AD4hNlp5pJSc23yd59aewAtcns99nzMbrwBbheUf5jxrZsPm6dkyj18pciQdoTtq0B01EEIw
      0W0x1mWhCYGuCQ73RZjqDbPZcDneH+VMtsHrKzWWy23a3tZ53Vv/XSqdIdtcQRM6qVDPtQ+a
      iZ87C7u4Z+dOguoqfuZ1ZKtK/ZV/T9O58S+Atzh+WwXgk0BKyfcz3yHbXKHQymF7NhdKp3GC
      NmWnxLOLT/Kfzv0uFaf09jq8PXis4fhMF5rkag75usNPHe4iZun0xU2ipsap0QQAmnh7WPJP
      jCfpjhgkLZ3uqMloKoTrB2w0XC6tN5nbtMk1N3hp/SmaXoOoEcf2GqRCXWhC42TvvVvhcJpI
      d+fhyO9npjBNvrb+7veiXcPfnEW2q1TreRpOHYD5jVkK9fXtNrMtTWi8tP60CsB+1vJsvMDl
      zOYr6ELnmexjHO+6k8HoCG/kf0i77GNqBs8vP4nhhthsF3D9gOeWlshW2nz7wganV2tczDWx
      dI3L61v/14Tgs5MpLENDCLFtj0/C0hFCYOoan51KIYSgO2oynLL42SPdrFVdfnC1RbYU4fTG
      y5zoPknUiDERP/j2RgIP2arALr+lv33uEc6svvHuf3Qa4DkElQxVBLZTp+W2+M7Fb/Fn57/J
      a8svcz57hpbb4s/Pf5OKXX7X6m/tsXSh03BraijEfuH6Dqb+dsG3lJLvLj/C0a47WLfX+Ork
      X+e5tScYjI7SHxlmrZrlz85/i3uP30PTsQlaUQrNAjO5FhW3zdJmwMLGf2fTu5fDyVNMdMcp
      tzyGk1vPEbc+fA+PoW3tFdJRg7VGgT+c+X1S3l/FMDeIigOUWq+TNPv4zODPEDeTb78Gu4Rs
      VXa9BzA0g5JdxPHaPDf3NJ+e+iwLrk2XbpJ48f+lEe1haeEF/iLWz23pIyxWVnlz5TXy9Rzj
      3QfI1dZYLi3x9bv/BgvFOY4P3M5qZZmZwjTDA4PMFK6qPcB+8TvP/Ot3HFMHrDaWGIlNMFu5
      RNJMYWgGD438PJrQMDSD8chBfurwz5EvFhmJHqRqB0yvaXzv/H9gs/ECy+WnMbQmDe8CfTGd
      S6WzHOqT9MdD+IGHlJJcc5UzG68C167cXjtkeuuubW2/RbaxdVfmzVaBqOUgjSwHk0dpMM2p
      0SRjPS6l8jGen69Rb4UJJPiBJKjlaF95DP3ow0hn5wBczV9htnCVS7kL+IHPDxee53ef/de0
      XJtoKEbVrvDs3FP84Wv/Hy23xQ8aG/z3+joN36F/6guMhCLkS4uM13KYRohA+nz1zl+h2Nxk
      sucgJ4fv4smrj/Hf3vgDXll6ken1y5zOvMFIdILzc+fVHmC/KLdKOL5Dy7P59vSfMNgzwMpq
      lnivxfNXnuNA5ChDqWGQEhCUmpu0g0kajTU8Q+czUyeZr7/G5w99gZniZZpymYenvsrTme/x
      /Px/Yc1Z4ReOfI1X5l+m7G4yEBlivjzLycmTfCp9H6+sP8dU8giGZvK9lW/yy1O/xoXiaZbr
      8zw08jDPrf0lPVaahlfjvv7PcqH0+wxET9EwW/RYMT5/MEX2iX/DmRO/jp89w8HF/5+SH6HY
      /2n6C0ucLeb54vGfJZCS+c0WE91his0s359+jLgVZzp/ma+d/Drn185wx/CnuJS7QCKcRCDI
      VlZwAxentoaRv4SVGMRtVwnH+/jM5Od5bP0C1uYcoZG7KdklTgzcxp9f+B9YRphUpIs3M6/x
      t+//TZ6dfYpIKMJDh3+Gs8tnuGf0frUH2A8CGeD6Lrlqlt9/9T/y+sKrzBaukqtkmQgdIV/O
      82+f+hdMr1/iG9/6DZ6ZfY6l0gbHBwaY6I7QH4PbBm8jKUIkwnFuHzjJcGicw31HqDZrrDez
      NCotnrz6OLlalvVKjjO5NxhNjXMpcxE3cHn87Pc4nXuN1wovEPHjLFSvstHKkQyleDb7BCd7
      72XdztIXHiQV6uZU+gESZoqh2CA/d7QXrXCJ7pXHaS2/zvE3/ylBcZG+9jLdfb2cXpzjscvP
      8NpKmQu5JsmwzjNzZf7vJ/8t59eukK2s8Q8//094M/MaujA4lD7CpfXzRM0og4khMsUFfjE1
      SnXmSYzUKMJK0jajWIZFauRucqUluh/8B+gLz2PnzuOvvk7bbRE2LOJWgrVqllS4i+5oD9VW
      lQcnP8sbK6+QinSpPcCPcvw2ZaeIF3iUnSJHUicQCKpuma5QL9nmMmvNDPf0fXprfHlkiMgO
      9abbCQIfITR86WM7TWJWnH/33G/TdBr8cPl5pnoPEg8lsAKLn7/nazw9833uGPoUd43ewytL
      P2S8+05eWZ5BE5KHT6Q5v2pg+zYDiUGWS4sc7T9BxIyQq+WIWQlGYuMINBJ6FzPFy/z80a/S
      cOq8uvoif+cn/j7//Pv/JxcLZ9CkzqurL1Cp1mnYTVaby9yeOkUoolMPalxcvoAMSw6ljrNR
      y3MofuJ6j5GpQ/31/4L1qa8zkX8Zffx+XNHNSqPCk9OzTMplau4apzPn0MQGy8U3GIr8LEnL
      ZKW8zEo5xAtzNtlyjdFUEtuNsFxc5L7AI+K1yVdXeeCOX6J85bsY6SNIJM1GgbAZJR7rowbU
      Y33Uug8g2hXcS9/BD1wioShxK8F6bY2YFSdiRmi5TYQQ1No1ElZSBeCd/MDjlfxzLNbn6LF6
      6Q718kr+OYrtDWpuhZM995JpLKEJjbnqFV4vvMSR1G1MJA6yUL3K3ekHaPlb1UddVg+l9iZd
      oR4AHr/8KCcG7+S5uadIWFvdjrMbV/m1+3+DC7mzSOD5paf4rQf+MenoAN88+8f86qlfo2yX
      GEqO0B09wBsr/5EHJn+VUvM0pqaTDMcBEALCZoSyXSJqRjF1k0J9nYgRJhnqpuXZfGrsFIvF
      eVLhFNFQlIHIMIYwSVk9PL34BJ879FOczb3BePowA4khZkvTXKydRxgQ0kJEjQTj0XH+8wu/
      h+02+dKJX2BJm2f9yl/w0/f8Ov/ed/j7XeOcvvhtVod+hWgA80GDh+/4SeZf+Av+umxwIfMI
      9eQI/+upX+ZfPPpHfPrwFLGgn9XGeU5U3mSlscqcqzMcuszC5jyf60kTiRRxapJQ7RUafgtd
      F/jSpz1yN6Z0eHX+CUwjxCNn/oir1VVcGZAdvJPw1cc5O/sDElYS13dZKS0TC8V561KJoRn0
      xftVAN4ipeSZtccZj08xmTxCd6iXqBHj9cKLfG7oi4DkQvFNPj34EHW3xg/Xn+YrB36Vl9af
      5qXcU8TNJGc3X+Nq5SKWHmY0doCzG6/y+ZEvIR3BEzPfZbpwmSY16qUa3UaaUMTk98/8HmPp
      MSyiXMidZSAxxETPJCvlJcq2h66NsloNWK3ohIwQDxwYY7HY5vHL3926CVQoSjQURdd0YqE4
      kVCUWCiGLnQ0TScWiqEJwWcOfoG/nP4eiXASDY1YKI4Qgr7IAEvNWSYOTfLC/LMcHbuN0a5x
      Xlx4lt/89Dd47PKjSCn54vEv83sv/A6nxn6C0vp5mk6Dc+cegeIcZuEqa67NH0w/xqv08SUv
      4M1WmMzmFR5/7E8ZTwSkzRR6Y5ahxhw9kRZmZJ3lXIipVJqqAb36eY4MTdLfLPCg91/5nvCx
      ugZxxWEON88ifJuSXUHm3sDwm2z2nSKy+pfc1t9D39Bt3Nvbyw+bY1wqz7Gy8jpHpCQy/wyv
      ZF7ntp5Jrj76Dep3/BL39E7hr56mK9LNeLuuAgCw2ljihdwPOJV+gEOp4+967N7+n7z+84OD
      DwEQN5N8ZfKvAfD54S8CWz0m3174I3529BfINdZ4afE5ziycI7uRQzrwj77wz/nH3/kt/rcv
      /EOctstfznyX37j3G/zuU/+GX3/gNxiITfAvn/xn5OsmS2WbodSXmS7YfP3uv0LDqTLZm2Ik
      9X8wlBxionuCsa4JAL5y5y8jEFsXn4bvJmyEGUwO85s/+VsA/MzRL6GJrf7+v3Xf36M/MUC1
      Vb1+k9mU1cWAM0pvLE29XWO0a4z++AD5Wo6EESEVSrBay5IKJynU1jjkbCDWXuOs06THzWN3
      9zPTKnMqNUquMsag6GPYToLj4KXXmfUqJESSkZP3IOfOE86vk5p7iV4jwpd7Y3THdVZaRxBi
      g7T0uasLvrt8gK8OrSDaMaQj+GtjY9hXFnjEiPFlr025GeZRLcffafUSXU+QDjXYXHmVweQp
      DnpNDNPjhGPiR8YYDQ4SX32SkUgSe+4patEeZt74Q/7e4Z9Gv/CtT/5tUaSUvPa9R7jnS7+E
      pn24c3opJU23SdttUfGLXCqf4edGv/KuKTlblSK19Qye3cRKpJBBgO85pIYPYCWvVTjJAKoZ
      LlWyhIFhTeNbmde5un6RdHKEv3Hf3+XJy49imDH+yh1f49Ezf8xnj30FV5p4vstGA5pOBctM
      UG8HVFobHO8fZrw7jJSgBy1kcQEA57X/jEgMgDAI6gWMgWP4a+cRsT60238Fv7pGyxogFImD
      lDiNGr7TRg9Z+E4LPRQmnOxG16rY7VXmGg5HopI3N9aZXnmK/+X2h3kmt8IDfQPY+ctcrPvc
      HXNY3lzFiSW43fD4s3KThyMaQSjO5WKRqb4x2r5Ovl0n7BzDNzMMWAYtzWMpN4aM5llp2ZS0
      dQ7GotjNBsONOj8xeh+5+WeItj303mH87hh6pgzxEHa7TqXdxRWtn4NBi3hokFzXOPVmk5FI
      gYa+TkJMsFJtcnKgRCsw8BomWlKQaObwgn7cSDeyEqCbLZyISeryk1Sn7mWuGeXOzBP8zvD/
      ztebT7Pasm9eAKTvMj09TbSrn2hIYGmSwEqRilk3NQBSSgLfx3Pa10/CHvlX/4hf/Mb/RaKn
      b+f1kFTtCi8sPMebK29iGRFWNtZAt3h4bJzPpSNIO4Zw1ynWw2jCwuxJ00wdI1lZxG9XMY0w
      m4U1FvQWWjTM7OYig9Lmzcomfd1H2Wgs8WDfp/A8SeBq3GYOUiOMLkxKoUF828MTAt318IRF
      d7uCdDSisRppo4VmGlQdE9MK0RWvkTt7msp6he6uJu7AHcSTMQKniK13EamfwUwnaNZjGBEf
      cGlUo3SlK/h+gNBMQpEA349Ts6tEtTKmbuLaNiGniUh24WwIgmQLX/TjN+JYsRpOKw66Q9iq
      UqsnEJZBpLaOZoYgZVDe7MJjHCO0Qb4xyrDVou0aRKkQTmUo2X2MCBsnlcHKj+OnVrE1n0Tp
      IE7fLFHbwkHgBjYhw8cLxXFdH9PycMr9RCsNnDEHWYxRSTqs2nAkJNnUW/SW+uhKlmjoYPo6
      YjNGyAjT7CmwvDzBgZElNjyNSj3F5OAcq800A2EPoUPD1wjrIGurzJoj1MstspnO5g4AAAha
      SURBVMRuXgDqpRxVL0ajnKPVLOOLOCfvOHa9GCa4NiLwrW/pG/m9lMuwfOENNrJLhGNJhBBI
      wK5X0Q2DVO8ApbUlTOlwIH2MlC+4FOmjomv4AlzfJl8tMr25QssPMRCOYPlVRuUmTisgLARu
      0EcgHDwZoBspWl4dKUxsPU7Lb9IM6UQIk/GLmFJDBE0GRYo8bQ7TjRnpoxJopDBxhcCQAp2t
      bnspfRBbQxAQPoGUmBpouoOkDZig1dA1A586hhYAYaRoI6WGYTh4soGhRfCDFgECQxgIbwC0
      TQwtie8aSK0EwRBuINE0D8+zsIwmIdPHqVkEehs8nQg2rtQAAbrAlREiskIziGDpPi1poGlh
      ZOBQ8yVRM4kUAulr2IFNLAjREDaGhIpWQjph6oGDK0N06RqbPoSFRAqftuHQFVjU/TBhrUHc
      8SkhONhXpVIMo5sGCT2g0Y5i9VSxQh7lUopkokqtGEcKn2jEwWhb6D11KHShRR1sqRF2o3he
      BE3XMaVLIAMI3K29XsQjqAs8XUdYDoEdRcYdpHAw7CR+YgOD9s0LgF0tkKtI7HqRSNikVW8w
      dfx2LEP7yHsA12njtVuEYwnEDoc5nmtj5y9DK4bRDigaYVoaSCEQQtKWJqbwaYswuibwAwlS
      IiUITXvr+hICiUAQSIkAhCYI/AAhtK3HxdZeSBMCKTQ0GYAQmJrElwJDgwDQhUAYJltRlQhN
      R8gAjQApNPAcpB5CC9oEmoXr+UgJrhegaxKJjpTBteBc+0IQGjLYGpKsv1VjLiW6ruP5PiDQ
      NHHty0Ow1RIwNA03kATB1mszdfCkACkxDYHnS0xN4gZbr0Mi8AKQCHQhcf2t161vvQX4UiAI
      tkbcCYGUoAlJIEHXttYFMESw1XYJILbeWwG6kCDADcS7XgdstaPtCzSx9QcJ5NZfRBNb7fED
      ef1nU/i0fYGuAXKrjYEUWJoLCNr+tc/K1ktFJyBAoCNx0bfWuWmHQFKSXVkk1j2IqflYpoHt
      QiIWVrdGVPatT/xJsKJ8FGoohNLRVACUjqYCoHQ0FQClo6kAKB1tT8YCCSHw/Z3vEBYEwYce
      xgDc0OwiN7rtG1n+Vm57N8vvl/flRpf/ONuyJ92gH+RGX9CttF/a8lZ55H5oC+yf9wVublv2
      RQAU5eOyZ5HOLs6wUdkqjm40Gkg8isXqe5YLPIeLF6/w1r3EpJQszF5hemaBWqnAufMXafs3
      nlnHrnP56ty1J3Fo2A7lYpHt7lkmvTaXpt++41i1VODSxQsUa01mr1wis7Zxw8//Ts1qkdmF
      rWJzt92i7foUi8X3LOc7NlcuX+bcxenr/7axvsrFixep2zaXL5wjv/ne9/DDqpUKzK+sAeC0
      Gjg+27YDKZmfvki97VNYW+Hy9Oy14Q3gNGtcunSRbL7IyuIss4sZdvuNKmXA7KXzNK/dvbzR
      aBAELUql9xbVO3aNKzPzb6/rO0xfucz8cpZ6eYP55fdOh7SdPaoHCAhbFvWmDakob7z8IlO3
      387q7Aqxnh56YjrrG2UOHL2NqB6gC971Jk5MHuTKpWkyeZfbjo6zuLLGwQPDOz7b9i3Qwd+a
      jrNSWOblSxUO9FusZDMMDg6TXV3DDEc5cWSKubkFguDtFsRTvYwELmuL88QGx7BL6zCU3vW7
      IUwLr10AIDN/mXw7QlxrsbK4wuiBYbKZHOFkD4cPjHDk8CSzi7nr6/b0DeG1W2SuTtN35A5K
      K3P09yZ3eqr3pYdjtPMrwBCLl09Ti4wTauVZWckwMjxAdr1AItXDxHAf4ZBG0/Gp1Fr0J8IU
      6zbpRAQjHGNyfJTl1SzCjKMFNkEg0bUbnxBDBgFhIbF9CNPm5Zde5Pa7TjB7aY2+kX5MaVMo
      NrnrvrsJMJDuO6ZXFQYHpyaZnl1E75ug3dwAPvgzskd7AI1I5O0JjgeGxxjq76V/aIyYZdBo
      e4z0d+O4PlY48vYAqWtmpqeZOHwUnYB220FoN57bcCSyNRoTSHV3MzY2RiQS49DBA5Qyi/RO
      HEF6bXzPplprkF1ZoXVtVFe5sEbR1jgwPoDnOvj+R7vXZSQSuT5hUFd3L+PjY0TjKSYGeslv
      bjB+cAqntTWzYXYlw9Do6PV111eXCCI9DPUlcRxna1DfLkXDkes/d/f2Mj42SjzVw+hAF6vr
      ZQ4fPkSrWUfTTayQCWx1Zrje25PeOY0yi2tFDh2cxPe89+3s+CCabmBZW/ct0gyLoZEx0l0J
      RicOYooAL9DoilpItv6e7zzfl4HD9MwCh48cJhKJbP8E2z3nrlt7IwKPzFqBaqmIDwwN9LKe
      r9KbTpFO95IIG1yZXUTXdeqVTWynTTaTYXl1HQgIgoDVTIbRkWFW1kqMj+487n8npUKOdrvN
      RqkGZhehoEKipwfTDDM8dZDc7Hkajo9uRrn7nlPcd9+9bGSX8QKJ5/u0aiWaRDCcKr0DN7b3
      +VHrqxna7TaVRotkbz+NUoGedJpIVzcj/f3MXDy/NVoTiHelSYR1FhcXAfD9gMpGDq1riFZ+
      maHRiV23I5tZxGm1qbdcugfGqeQz9KbTxJI9jA91c+HsOaQWwnNs8qUmpcIawwM9NIIQQa1A
      teXhuB6Ba7NebNCbMIgme9F28e0P4Ls2+XqbzewKEujrSVCs+fT0REmnezGEx2KugAYU82u0
      nTarK8usbVTwPQ8IyGRzrK0s4rTb1OwPnoB7X5wEN+sVKk2Xwb40H7IX76aS0mdtNUt33xAR
      6+OtEg08h2yuwMDgEOZHmKTio/LdFmvrmwwND+/qcOZWqJY2aEuTvp7UTdvmvgiAonxc9kfH
      rqJ8TFQAlI6mAqB0NBUApaOpACgdTQVA6WgqAEpH+59f7/X0ty26gwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Đường ca tử vong' width='192'>
      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
      D3Dze5xe9tTm/MK3we5te3KmdY7peAaHJZJ+J/FUad8+8VjjlO8ah2+Z4pwjyQd7+gfd3voL
      rDO8s/QmV9cv7Tl+udj/4tp/ZnHnNuvdNX7jzV/zbVisJtMpSim2+1vkVtPXfdrpDn925Y8f
      8o3xY5BWBnfo615RHCSqBT9MhO1Puw+yflXM4pxl9eXfZjfssrG8zM0rV8nyIcv24uoHhDIk
      1xm5yeimXeKg7k0c5yN0xhrP3BWC1CRoq/eEPIGiU3Q5q2AEI2HQA8sF6qbbNJznmtvVD8Aa
      0iRB5/5LOt48TSNoEckazYLL7msGfIfhSEZom1dtE33PyhRjDW8svEqmMza6l0iLpFn5BZTF
      2f/6jf8b6yyrnWVevvafSXXKH374bS6sv4+2xof9nMFp35J8e3eH3OTk5pMnWL671C1al3zG
      e5O3OVI/Tl93q9i/Eopzk89yfuo5ypaC+0E/76NN7tuq6JSt1/8dqU2IpkK6pkuae19sq7dB
      J21zdPI4mclIdcpMdIjZaI6Z2lzRzNbv3rHy38cH22/xztZr3OxcYScdmlLl4gYw1lUmuRKq
      qgM/sFygO90btGQdZw3OZOAMFy/dYmNxbyuX+foRfvLwXwYKlYrnpQRFqV7ZWl3bnFQnGKv5
      k0t/yJ3d21hnCgEQ5CYj0xn/7Lv/M68v/JDVzjJ/fPEPCGTAq7dfITcpKpAsdm6hrfajmqwh
      zzWZybizfodBPqCTtgHYTjfZTjc+8rmcc9xpZ3yebizdvMNz01+jr3tV0ksKSTNs0QiaRDLm
      63Pf2NcxB3kfbTXvLb3Nn73zGyTRNFo4DjWuwbQkSQfsJjv8i1d+FWMNjahBrnMyk9FUEzTC
      FicmT5FlecUPClWMwA812U23WR0ssZGsVucsFzhApi2xKgRAKn7h6b9GIFXFaTpwJpAxGbGM
      wWrQKc7qT1w0oYyrzmjlCB/jDLnNWe2sVNNkOmmb1c4q2mTsDDZQUhXtPFK+d+MvePvOG/Sy
      Ht9+/3cw1jBdnyHVKXEcMcj6GKuLfqSWNEtpD9p0e7457UZ/nYWd29zsXOVW57o/Z2G+rXUy
      ltoZxjreXup+5p5Efd1lOp4lNUnhZO5NfEkhOdF84hOPY9M1Nhb+PwBvyhlNP+2x9v63ud59
      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
      ePgoRAHC9knZQ+5ipVqn26zS6Ax7QxX1uLa6w9Gjh5FKEsshQ/S9wPV8zIMJYTqbZ252jpSf
      4tipY7R3NslOzGHooS5Qt7ZHujh5uz16zSq7jZClxVlkkpBIxXsp1rRdXHP4szl+htm5OXIp
      j8UjJ1FhA+EW8O3hnd5of9MURGGIeqMNNaxev8rE/BF8G6IoOuCNvjt8/03x3kJxlPm5GTL5
      EnPFHHvNFocPLxAMQoSw8Dz7Ld/d2biFXZhktJS/bcN7gWHauI59YL/H9MwcpXyG+cUlOrt/
      s50T6vUWld0degcjWq9ZZbcesHhoBt9z337v91yL94Hy7hZhGNLsDEgVxgg6VUqjo3i5HNNT
      09xauUisBMiY7f06rUaF1bU1tNZIKenUy6jsBEl9i4npub+1nLDXpjUIKe8Ne6ZCxiUSLmnf
      YXRsFBX22Ku3ERicOnsvDz74EHbcptENSKIIVMLuXo3xUg6VypN+jxy+dr1CGIbD1zMrg28G
      +PkiJhYzi4s0tm7SPshwIk2f6bEcu5vrhIkmThLifodGLyFjK7Ij48McWu+CoNciCkM2doYj
      ay7tE5hZci6Mjs+iBlX26x0A9rbXCcMQpzRFc3uN6dkZ1ta34YDqvbu9xfTsLFubu8zPzbwn
      m3c2NwnDgO4gYnxqivr+PiOjo2RGR5gpFVm+eAltmOg4oNztUd3ZYXVtbVimUtTLuzQbtbfY
      8G5Iwj7VXkh1ZxsNjBYytHqaQjHL9OIije2btHshYHHvgw/y0EMP0q7sELzRzoMOlVqDm9t1
      ks7+WzrTf7BJsJIxu7v7jE1O41gfoh9qTb26j3CzFHPpD6+ct5Wr2N/dJV0cJeO/vef5kAql
      VtnHdLMU/v+09QAyDtjdrzM5NYn19+jh/7OgFft7u6QL76+d76wC3cEvNO7sBN/BLzTuOMAd
      /HxBKzqdDmH07suySRITJ8NVOCWHCwl/X9xxgDv4+UK/yh9/6z/xl3/xHRqdLj997RzNZp1G
      Z0ClUkEDG7eusl9r8YNv/ns29ltEgw7PPv2n/OTyBufPvUalVucP//0fsFNpcm35Aq3e3yJr
      z4e9D3AHd/A+MDY1x4l8l8vXNwjK6zxTaWHpCMd2ePTueVa2+/TP/7+cXZjn8EyJp//izzm9
      tMhqv0Ol3WB5dY9soYRZW+GFy3XGdlp86bOPvWNZd0aAO/j5gjBp7G1wo6oo6BaGnyVXHEe0
      t5g/eS9upkTc3sXPlrAPEgqOFbNcX99FDeq0I5tCLkXaEXRJkXYMTh4/8rcXd2cV6A5+3qGS
      iBdffo2PP/LxD7zHvuMAd/ALjf8PpJpkcu57Sf0AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Đường culmulative cases' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Đường culmulative deaths' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
